ungroup() %>%
subset(select = c(Date,ISO.week,ExcesMortaliteCumsum,WeekNum,Annee,AnneeNum))
graph.ExcesMortalite<-ggplot() +
geom_line(data = filter(dbMergeBis, dbMergeBis$AnneeNum>2019),
aes(x=WeekNum, y=ExcesMortaliteCumsum, group = Annee, color = Annee),
show.legend = TRUE,
na.rm=TRUE,
size=2)  +
geom_line(data = filter(dbMergeBis, dbMergeBis$AnneeNum<=2019),
aes(x=WeekNum, y=ExcesMortaliteCumsum, group = Annee ),
show.legend = FALSE,
na.rm=TRUE,
size = 0.5,
color = "grey")  +
geom_smooth(data = filter(dbMergeBis, dbMergeBis$AnneeNum<=2019),
aes(x=WeekNum, y=ExcesMortaliteCumsum, group = 1),
show.legend = FALSE,
na.rm=TRUE,
color = "yellow",
size = 1.25,
span=0.1)  +
scale_y_continuous(breaks=c(0,10000,20000,30000,40000,50000,60000))+
scale_x_discrete(breaks = c("W05","W10","W15","W20","W25","W30", "W35","W40","W45","W50") )+
geom_hline( yintercept = 0)  +
theme_economist() +
theme(plot.title = element_text(size = 14, face = "bold"),
plot.subtitle = element_text(size = 10),
plot.caption = element_text(size = 10, face = "italic"),
legend.position = "top") +
labs(x = NULL,
y = NULL,
color = "Année",
title = "Excés de mortalité en France de 2020 à 2023",
subtitle = "La courbe jaune représente l'excés de mortalité moyen sur la période 2014-2019, principlement lié aux épidémies grippales",
caption = "Sources : Santé Publique France, Insee et Réseau Sentinelles.\nCalculs et erreurs : P. Aldama / @paldama")
ggsave("grExcesMortalite.png",plot = graph.ExcesMortalite, bg = "white", width=12)
gMortalite<-ggarrange(gTimeSeriesPoisson,graph.ExcesMortalite,nrow=2)
ggsave("gMortalite.png",plot=gMortalite,bg="white",height=10, width=9)
# Plot les données en time series
gTimeSeriesPoisson<-ggplot(data=filter(dbMerge,dbMerge$Annee>=2014)) +
geom_line(aes(x=Date, y=DECES, color = "obs"),size=0.5) +
geom_line(aes(x=Date, y=DecesAttendus, color = "fit"),size=1) +
scale_color_manual(name =" Nombre de décés ",
labels = c("attendus","observés"),
values = c("obs" = "black", "fit" = "blue"))+
geom_ribbon(aes(x=Date,
ymin = DecesAttendus ,
ymax = DecesCovid,
fill="Décés hospitaliers du COVID"), alpha=0.5) +
geom_ribbon(aes(x=Date,
ymin = DecesAttendus - 1.96*DecesAttendusSE,
ymax = DecesAttendus + 1.96*DecesAttendusSE,
fill="Sur/sous-mortalité normale"), alpha=0.1) +
scale_fill_manual(c("",""),values=c("purple","blue")) +
theme_minimal() +
theme(plot.title = element_text(size = 14, face = "bold"),
plot.subtitle = element_text(size = 12),
plot.caption = element_text(size = 10, face = "italic"),
legend.position = "top") +
labs(x = NULL,
y = NULL,
title = "Mortalité hebdomadaire en France",
subtitle = "Nombre de décés observés et attendus en absence d'épidémie (grippale ou Covid19)")
ggsave("gTimeSeriesPoisson.png",plot=gTimeSeriesPoisson, bg="white", height = 7, width =10)
dbMerge$WeekNum<-substr(ISOweek(dbMerge$Date), 6, 8)
dbMerge$Annee<-substr(ISOweek(dbMerge$Date), 1, 4)
dbMerge$AnneeNum<-as.numeric(dbMerge$Annee)
dbMergeBis<- dbMerge %>%
mutate(ExcesMortalite=DECES-DecesAttendus) %>%
filter(AnneeNum>=2014) %>%
group_by(Annee) %>%
mutate(ExcesMortaliteCumsum=cumsum(ExcesMortalite)) %>%
ungroup() %>%
subset(select = c(Date,ISO.week,ExcesMortaliteCumsum,WeekNum,Annee,AnneeNum))
graph.ExcesMortalite<-ggplot() +
geom_line(data = filter(dbMergeBis, dbMergeBis$AnneeNum>2019),
aes(x=WeekNum, y=ExcesMortaliteCumsum, group = Annee, color = Annee),
show.legend = TRUE,
na.rm=TRUE,
size=2)  +
geom_line(data = filter(dbMergeBis, dbMergeBis$AnneeNum<=2019),
aes(x=WeekNum, y=ExcesMortaliteCumsum, group = Annee ),
show.legend = FALSE,
na.rm=TRUE,
size = 0.5,
color = "grey")  +
geom_smooth(data = filter(dbMergeBis, dbMergeBis$AnneeNum<=2019),
aes(x=WeekNum, y=ExcesMortaliteCumsum, group = 1),
show.legend = FALSE,
na.rm=TRUE,
color = "yellow",
size = 1.25,
span=0.1)  +
scale_y_continuous(breaks=c(0,10000,20000,30000,40000,50000,60000))+
scale_x_discrete(breaks = c("W05","W10","W15","W20","W25","W30", "W35","W40","W45","W50") )+
geom_hline( yintercept = 0)  +
theme_minimal() +
theme(plot.title = element_text(size = 14, face = "bold"),
plot.subtitle = element_text(size = 10),
plot.caption = element_text(size = 10, face = "italic"),
legend.position = "top") +
labs(x = NULL,
y = NULL,
color = "Année",
title = "Excés de mortalité en France de 2020 à 2023",
subtitle = "La courbe jaune représente l'excés de mortalité moyen sur la période 2014-2019, principlement lié aux épidémies grippales",
caption = "Sources : Santé Publique France, Insee et Réseau Sentinelles.\nCalculs et erreurs : P. Aldama / @paldama")
ggsave("grExcesMortalite.png",plot = graph.ExcesMortalite, bg = "white", width=12)
gMortalite<-ggarrange(gTimeSeriesPoisson,graph.ExcesMortalite,nrow=2)
ggsave("gMortalite.png",plot=gMortalite,bg="white",height=10, width=9)
# Plot les données en time series
gTimeSeriesPoisson<-ggplot(data=filter(dbMerge,dbMerge$Annee>=2014)) +
geom_line(aes(x=Date, y=DECES, color = "obs"),size=0.5) +
geom_line(aes(x=Date, y=DecesAttendus, color = "fit"),size=1) +
scale_color_manual(name =" Nombre de décés ",
labels = c("attendus","observés"),
values = c("obs" = "black", "fit" = "blue"))+
geom_ribbon(aes(x=Date,
ymin = DecesAttendus ,
ymax = DecesCovid,
fill="Décés hospitaliers du COVID"), alpha=0.5) +
geom_ribbon(aes(x=Date,
ymin = DecesAttendus - 1.96*DecesAttendusSE,
ymax = DecesAttendus + 1.96*DecesAttendusSE,
fill="Sur/sous-mortalité normale"), alpha=0.1) +
scale_fill_manual(c("",""),values=c("purple","blue")) +
theme_stata() +
theme(plot.title = element_text(size = 14, face = "bold"),
plot.subtitle = element_text(size = 12),
plot.caption = element_text(size = 10, face = "italic"),
legend.position = "top") +
labs(x = NULL,
y = NULL,
title = "Mortalité hebdomadaire en France",
subtitle = "Nombre de décés observés et attendus en absence d'épidémie (grippale ou Covid19)")
ggsave("gTimeSeriesPoisson.png",plot=gTimeSeriesPoisson, bg="white", height = 7, width =10)
dbMerge$WeekNum<-substr(ISOweek(dbMerge$Date), 6, 8)
dbMerge$Annee<-substr(ISOweek(dbMerge$Date), 1, 4)
dbMerge$AnneeNum<-as.numeric(dbMerge$Annee)
dbMergeBis<- dbMerge %>%
mutate(ExcesMortalite=DECES-DecesAttendus) %>%
filter(AnneeNum>=2014) %>%
group_by(Annee) %>%
mutate(ExcesMortaliteCumsum=cumsum(ExcesMortalite)) %>%
ungroup() %>%
subset(select = c(Date,ISO.week,ExcesMortaliteCumsum,WeekNum,Annee,AnneeNum))
graph.ExcesMortalite<-ggplot() +
geom_line(data = filter(dbMergeBis, dbMergeBis$AnneeNum>2019),
aes(x=WeekNum, y=ExcesMortaliteCumsum, group = Annee, color = Annee),
show.legend = TRUE,
na.rm=TRUE,
size=2)  +
geom_line(data = filter(dbMergeBis, dbMergeBis$AnneeNum<=2019),
aes(x=WeekNum, y=ExcesMortaliteCumsum, group = Annee ),
show.legend = FALSE,
na.rm=TRUE,
size = 0.5,
color = "grey")  +
geom_smooth(data = filter(dbMergeBis, dbMergeBis$AnneeNum<=2019),
aes(x=WeekNum, y=ExcesMortaliteCumsum, group = 1),
show.legend = FALSE,
na.rm=TRUE,
color = "yellow",
size = 1.25,
span=0.1)  +
scale_y_continuous(breaks=c(0,10000,20000,30000,40000,50000,60000))+
scale_x_discrete(breaks = c("W05","W10","W15","W20","W25","W30", "W35","W40","W45","W50") )+
geom_hline( yintercept = 0)  +
theme_stata() +
theme(plot.title = element_text(size = 14, face = "bold"),
plot.subtitle = element_text(size = 10),
plot.caption = element_text(size = 10, face = "italic"),
legend.position = "top") +
labs(x = NULL,
y = NULL,
color = "Année",
title = "Excés de mortalité en France de 2020 à 2023",
subtitle = "La courbe jaune représente l'excés de mortalité moyen sur la période 2014-2019, principlement lié aux épidémies grippales",
caption = "Sources : Santé Publique France, Insee et Réseau Sentinelles.\nCalculs et erreurs : P. Aldama / @paldama")
ggsave("grExcesMortalite.png",plot = graph.ExcesMortalite, bg = "white", width=12)
gMortalite<-ggarrange(gTimeSeriesPoisson,graph.ExcesMortalite,nrow=2)
ggsave("gMortalite.png",plot=gMortalite,bg="white",height=10, width=9)
source("~/Library/Mobile Documents/com~apple~CloudDocs/Documents/Covid/prgGraphs.R")
ggplot() +
geom_line(data = filter(dbMergeBis, dbMergeBis$AnneeNum>2019),
aes(x=WeekNum, y=ExcesMortaliteCumsum, group = Annee, color = Annee),
show.legend = TRUE,
na.rm=TRUE,
size=2)  +
geom_line(data = filter(dbMergeBis, dbMergeBis$AnneeNum<=2019),
aes(x=WeekNum, y=ExcesMortaliteCumsum, group = Annee ),
show.legend = FALSE,
na.rm=TRUE,
size = 0.5,
color = "grey")  +
geom_smooth(data = filter(dbMergeBis, dbMergeBis$AnneeNum<=2019),
aes(x=WeekNum, y=ExcesMortaliteCumsum, group = 1),
show.legend = FALSE,
na.rm=TRUE,
color = "yellow",
size = 1.25,
span=0.1)  +
scale_colour_hc() +
scale_y_continuous(breaks=c(0,10000,20000,30000,40000,50000,60000))+
scale_x_discrete(breaks = c("W05","W10","W15","W20","W25","W30", "W35","W40","W45","W50") )+
geom_hline( yintercept = 0)  +
theme_minimal()+
theme(plot.title = element_text(size = 14, face = "bold"),
plot.subtitle = element_text(size = 10),
plot.caption = element_text(size = 10, face = "italic"),
legend.position = "top") +
labs(x = NULL,
y = NULL,
color = "Année",
title = "Excés de mortalité en France de 2020 à 2023",
subtitle = "La courbe jaune représente l'excés de mortalité moyen sur la période 2014-2019, principlement lié aux épidémies grippales",
caption = "Sources : Santé Publique France, Insee et Réseau Sentinelles.\nCalculs et erreurs : P. Aldama / @paldama")
graph.ExcesMortalite<-ggplot() +
geom_line(data = filter(dbMergeBis, dbMergeBis$AnneeNum>2019),
aes(x=WeekNum, y=ExcesMortaliteCumsum, group = Annee, color = Annee),
show.legend = TRUE,
na.rm=TRUE,
size=2)  +
geom_line(data = filter(dbMergeBis, dbMergeBis$AnneeNum<=2019),
aes(x=WeekNum, y=ExcesMortaliteCumsum, group = Annee ),
show.legend = FALSE,
na.rm=TRUE,
size = 0.5,
color = "grey")  +
geom_smooth(data = filter(dbMergeBis, dbMergeBis$AnneeNum<=2019),
aes(x=WeekNum, y=ExcesMortaliteCumsum, group = 1),
show.legend = FALSE,
na.rm=TRUE,
color = "yellow",
size = 1.25,
span=0.1)  +
scale_colour_economist() +
scale_y_continuous(breaks=c(0,10000,20000,30000,40000,50000,60000))+
scale_x_discrete(breaks = c("W05","W10","W15","W20","W25","W30", "W35","W40","W45","W50") )+
geom_hline( yintercept = 0)  +
theme_minimal()+
theme(plot.title = element_text(size = 14, face = "bold"),
plot.subtitle = element_text(size = 10),
plot.caption = element_text(size = 10, face = "italic"),
legend.position = "top") +
labs(x = NULL,
y = NULL,
color = "Année",
title = "Excés de mortalité en France de 2020 à 2023",
subtitle = "La courbe jaune représente l'excés de mortalité moyen sur la période 2014-2019, principlement lié aux épidémies grippales",
caption = "Sources : Santé Publique France, Insee et Réseau Sentinelles.\nCalculs et erreurs : P. Aldama / @paldama")
print(graph.ExcesMortalite)
ggplot() +
geom_line(data = filter(dbMergeBis, dbMergeBis$AnneeNum>2019),
aes(x=WeekNum, y=ExcesMortaliteCumsum, group = Annee, color = Annee),
show.legend = TRUE,
na.rm=TRUE,
size=2)  +
geom_line(data = filter(dbMergeBis, dbMergeBis$AnneeNum<=2019),
aes(x=WeekNum, y=ExcesMortaliteCumsum, group = Annee ),
show.legend = FALSE,
na.rm=TRUE,
size = 0.5,
color = "grey")  +
geom_smooth(data = filter(dbMergeBis, dbMergeBis$AnneeNum<=2019),
aes(x=WeekNum, y=ExcesMortaliteCumsum, group = 1),
show.legend = FALSE,
na.rm=TRUE,
color = "yellow",
fill = "yellow",
size = 1.25,
span=0.1)  +
scale_colour_economist() +
scale_y_continuous(breaks=c(0,10000,20000,30000,40000,50000,60000))+
scale_x_discrete(breaks = c("W05","W10","W15","W20","W25","W30", "W35","W40","W45","W50") )+
geom_hline( yintercept = 0)  +
theme_minimal()+
theme(plot.title = element_text(size = 14, face = "bold"),
plot.subtitle = element_text(size = 10),
plot.caption = element_text(size = 10, face = "italic"),
legend.position = "top") +
labs(x = NULL,
y = NULL,
color = "Année",
title = "Excés de mortalité en France de 2020 à 2023",
subtitle = "La courbe jaune représente l'excés de mortalité moyen sur la période 2014-2019, principlement lié aux épidémies grippales",
caption = "Sources : Santé Publique France, Insee et Réseau Sentinelles.\nCalculs et erreurs : P. Aldama / @paldama")
print(graph.ExcesMortalite)
ggsave("grExcesMortalite.png",plot = graph.ExcesMortalite, bg = "white", width=12)
graph.ExcesMortalite<-ggplot() +
geom_line(data = filter(dbMergeBis, dbMergeBis$AnneeNum>2019),
aes(x=WeekNum, y=ExcesMortaliteCumsum, group = Annee, color = Annee),
show.legend = TRUE,
na.rm=TRUE,
size=2)  +
geom_line(data = filter(dbMergeBis, dbMergeBis$AnneeNum<=2019),
aes(x=WeekNum, y=ExcesMortaliteCumsum, group = Annee ),
show.legend = FALSE,
na.rm=TRUE,
size = 0.5,
color = "grey")  +
geom_smooth(data = filter(dbMergeBis, dbMergeBis$AnneeNum<=2019),
aes(x=WeekNum, y=ExcesMortaliteCumsum, group = 1),
show.legend = FALSE,
na.rm=TRUE,
color = "yellow",
size = 1.25,
span=0.1)  +
scale_colour_stata() +
scale_y_continuous(breaks=c(0,10000,20000,30000,40000,50000,60000))+
scale_x_discrete(breaks = c("W05","W10","W15","W20","W25","W30", "W35","W40","W45","W50") )+
geom_hline( yintercept = 0)  +
theme_minimal()+
theme(plot.title = element_text(size = 14, face = "bold"),
plot.subtitle = element_text(size = 10),
plot.caption = element_text(size = 10, face = "italic"),
legend.position = "top") +
labs(x = NULL,
y = NULL,
color = "Année",
title = "Excés de mortalité en France de 2020 à 2023",
subtitle = "La courbe jaune représente l'excés de mortalité moyen sur la période 2014-2019, principlement lié aux épidémies grippales",
caption = "Sources : Santé Publique France, Insee et Réseau Sentinelles.\nCalculs et erreurs : P. Aldama / @paldama")
print(graph.ExcesMortalite)
ggsave("grExcesMortalite.png",plot = graph.ExcesMortalite, bg = "white", width=12)
source("~/Library/Mobile Documents/com~apple~CloudDocs/Documents/Covid/prgGraphs.R")
source("~/Library/Mobile Documents/com~apple~CloudDocs/Documents/Covid/prgLoadData.R")
source("~/Library/Mobile Documents/com~apple~CloudDocs/Documents/Covid/prgGraphs.R")
summary(ModelPoisson)
dbMerge$t<-c(1:nrow(dbMerge))
dbMerge$cose<-cos(2*pi*dbMerge$t/52)
dbMerge$sine<-sin(2*pi*dbMerge$t/52)
ModelPoisson<-glm(
DECES ~ t + cose + sine + lead(incid_dchosp,1) + inc100 + SeasonalDummy_2014:inc100 +  SeasonalDummy_2015*inc100 +  SeasonalDummy_2016*inc100 +
SeasonalDummy_2017*inc100 + SeasonalDummy_2018*inc100 +  SeasonalDummy_2019*inc100 +  SeasonalDummy_2020*inc100 +
SeasonalDummy_2021*inc100 +  SeasonalDummy_2022*inc100 +  SeasonalDummy_2023*inc100 ,
data = filter(dbMerge,dbMerge$Annee >= 2014 & dbMerge$Annee <= 2023),
family = quasipoisson(link="log"),
control = list(maxit = 500))
summary(ModelPoisson)
# Estime le modéle quasi-Poisson de 2014 à 2019
dbMerge$t<-c(1:nrow(dbMerge))
dbMerge$cose<-cos(2*pi*dbMerge$t/52)
dbMerge$sine<-sin(2*pi*dbMerge$t/52)
ModelPoisson<-glm(
DECES ~ t + cose + sine + lead(incid_dchosp,1) + inc100 + SeasonalDummy_2014:inc100 +  SeasonalDummy_2015:inc100 +  SeasonalDummy_2016:inc100 +
SeasonalDummy_2017:inc100 + SeasonalDummy_2018:inc100 +  SeasonalDummy_2019:inc100 +  SeasonalDummy_2020:inc100 +
SeasonalDummy_2021:inc100 +  SeasonalDummy_2022:inc100 +  SeasonalDummy_2023:inc100 ,
data = filter(dbMerge,dbMerge$Annee >= 2014 & dbMerge$Annee <= 2023),
family = quasipoisson(link="log"),
control = list(maxit = 500))
summary(ModelPoisson)
pseudoR2<- 1-(ModelPoisson$deviance/ModelPoisson$null.deviance)
pseudoR2
phiPoisson<-summary(ModelPoisson)$deviance / summary(ModelPoisson)$df.residual
source("prgGraphs.R",echo=FALSE)
source("~/Library/Mobile Documents/com~apple~CloudDocs/Documents/Covid/EpiVARinR.R")
source("~/Library/Mobile Documents/com~apple~CloudDocs/Documents/Covid/EpiVARinR.R")
create_plot(Forecast_df, "R", "R_sm", "R.fcst", "R.fcstLow", "R.fcstUp", "Taux de reproduction effectif (Reff)")
# Function to create the common structure of the plots
PlotEpiVar <- function(data, y, y_sm, y_fcst, y_fcstLow, y_fcstUp, title) {
ggplot(data = data) +
geom_point(aes(x = date, y = .data[[y]]), color = "grey") +
geom_line(aes(x = date, y = .data[[y_sm]], color = "Tendance")) +
geom_line(aes(x = date, y = .data[[y_fcst]], color = "Projection")) +
geom_ribbon(aes(x = date, ymin = .data[[y_fcstLow]], ymax = .data[[y_fcstUp]], fill = "blue"), alpha = 0.2) +
geom_line(data = ForecastOutOFSample_df, aes(x = date, y = .data[[y_fcst]], color = "Projection out-of-sample")) +
geom_ribbon(data = ForecastOutOFSample_df, aes(x = date, ymin = .data[[y_fcstLow]], ymax = .data[[y_fcstUp]], fill = "red"), alpha = 0.1) +
scale_color_manual(name = "", values = c("Tendance" = "black", "Projection" = "blue", "Projection out-of-sample" = "red")) +
scale_fill_manual(name = "", values = c("Intervalle de prévision" = "blue", "Intervalle de prévision out-of-sample" = "red")) +
scale_x_date(date_label = "%Y-%m") +
theme_pubr(base_size = 8) +
theme(plot.title = element_text(size = 11)) +
labs(x = NULL, y = NULL, title = title)
}
# Create the plots using the function
gR <- PlotEpiVar(Forecast_df, "R", "R_sm", "R.fcst", "R.fcstLow", "R.fcstUp", "Taux de reproduction effectif (Reff)")
gcas <- PlotEpiVar(Forecast_df, "cas", "cas_sm", "cas.fcst", "cas.fcstLow", "cas.fcstUp", "Cas confirmés (date de prélèvement)")
ghosp <- PlotEpiVar(Forecast_df, "hosp", "hosp_sm", "hosp.fcst", "hosp.fcstLow", "hosp.fcstUp", "Lits en hospitalisation conventionnelle")
grea <- PlotEpiVar(Forecast_df, "rea", "rea_sm", "rea.fcst", "rea.fcstLow", "rea.fcstUp", "Lits en soins critiques")
gdc <- PlotEpiVar(Forecast_df, "dc", "dc_sm", "dc.fcst", "dc.fcstLow", "dc.fcstUp", "Décès hospitaliers")
print(gR)
# Function to create the common structure of the plots
PlotEpiVar <- function(data, y, y_sm, y_fcst, y_fcstLow, y_fcstUp, title) {
ggplot(data = data) +
geom_point(aes(x = date, y = .data[[y]]), color = "grey") +
geom_line(aes(x = date, y = .data[[y_sm]], color = "Tendance")) +
geom_line(aes(x = date, y = .data[[y_fcst]], color = "Projection")) +
geom_line(data = ForecastOutOFSample_df, aes(x = date, y = .data[[y_fcst]], color = "Projection out-of-sample")) +
geom_ribbon(aes(x = date, ymin = .data[[y_fcstLow]], ymax = .data[[y_fcstUp]], fill = "full sample"), alpha = 0.2) +
geom_ribbon(data = ForecastOutOFSample_df, aes(x = date, ymin = .data[[y_fcstLow]], ymax = .data[[y_fcstUp]], fill = "out-of-sample"), alpha = 0.1) +
scale_color_manual(name = "", values = c("Tendance" = "black", "Projection" = "blue", "Projection out-of-sample" = "red")) +
scale_fill_manual(name = "", values = c("full sample" = "blue", "out-of-sample" = "red")) +
scale_x_date(date_label = "%Y-%m") +
theme_pubr(base_size = 8) +
theme(plot.title = element_text(size = 11)) +
labs(x = NULL, y = NULL, title = title, fill="Intervalles de prévisions")
}
# Create the plots using the function
gR <- PlotEpiVar(Forecast_df, "R", "R_sm", "R.fcst", "R.fcstLow", "R.fcstUp", "Taux de reproduction effectif (Reff)")
gcas <- PlotEpiVar(Forecast_df, "cas", "cas_sm", "cas.fcst", "cas.fcstLow", "cas.fcstUp", "Cas confirmés (date de prélèvement)")
ghosp <- PlotEpiVar(Forecast_df, "hosp", "hosp_sm", "hosp.fcst", "hosp.fcstLow", "hosp.fcstUp", "Lits en hospitalisation conventionnelle")
grea <- PlotEpiVar(Forecast_df, "rea", "rea_sm", "rea.fcst", "rea.fcstLow", "rea.fcstUp", "Lits en soins critiques")
gdc <- PlotEpiVar(Forecast_df, "dc", "dc_sm", "dc.fcst", "dc.fcstLow", "dc.fcstUp", "Décès hospitaliers")
print(gR)
# Function to create the common structure of the plots
PlotEpiVar <- function(data, y, y_sm, y_fcst, y_fcstLow, y_fcstUp, title) {
ggplot(data = data) +
geom_point(aes(x = date, y = .data[[y]]), color = "grey") +
geom_line(aes(x = date, y = .data[[y_sm]], color = "Tendance")) +
geom_line(aes(x = date, y = .data[[y_fcst]], color = "Projection")) +
geom_line(data = ForecastOutOFSample_df, aes(x = date, y = .data[[y_fcst]], color = "Projection out-of-sample")) +
geom_ribbon(aes(x = date, ymin = .data[[y_fcstLow]], ymax = .data[[y_fcstUp]], fill = "full sample"), alpha = 0.2) +
geom_ribbon(data = ForecastOutOFSample_df, aes(x = date, ymin = .data[[y_fcstLow]], ymax = .data[[y_fcstUp]], fill = "out-of-sample"), alpha = 0.1) +
scale_color_manual(name = "", values = c("Tendance" = "black", "Projection" = "blue", "Projection out-of-sample" = "red")) +
scale_fill_manual(name = "Intervalles de prévisions", values = c("full sample" = "blue", "out-of-sample" = "red")) +
scale_x_date(date_label = "%Y-%m") +
theme_pubr(base_size = 8) +
theme(plot.title = element_text(size = 11)) +
labs(x = NULL, y = NULL, title = title, fill = "Intervalles de prévisions")
}
# Create the plots using the function
gR <- PlotEpiVar(Forecast_df, "R", "R_sm", "R.fcst", "R.fcstLow", "R.fcstUp", "Taux de reproduction effectif (Reff)")
gcas <- PlotEpiVar(Forecast_df, "cas", "cas_sm", "cas.fcst", "cas.fcstLow", "cas.fcstUp", "Cas confirmés (date de prélèvement)")
ghosp <- PlotEpiVar(Forecast_df, "hosp", "hosp_sm", "hosp.fcst", "hosp.fcstLow", "hosp.fcstUp", "Lits en hospitalisation conventionnelle")
grea <- PlotEpiVar(Forecast_df, "rea", "rea_sm", "rea.fcst", "rea.fcstLow", "rea.fcstUp", "Lits en soins critiques")
gdc <- PlotEpiVar(Forecast_df, "dc", "dc_sm", "dc.fcst", "dc.fcstLow", "dc.fcstUp", "Décès hospitaliers")
print(gR)
# Function to create the common structure of the plots
PlotEpiVar <- function(data, y, y_sm, y_fcst, y_fcstLow, y_fcstUp, title) {
ggplot(data = data) +
geom_point(aes(x = date, y = .data[[y]]), color = "grey") +
geom_line(aes(x = date, y = .data[[y_sm]], color = "Tendance")) +
geom_line(aes(x = date, y = .data[[y_fcst]], color = "Projection")) +
geom_line(data = ForecastOutOFSample_df, aes(x = date, y = .data[[y_fcst]], color = "Projection out-of-sample")) +
geom_ribbon(aes(x = date, ymin = .data[[y_fcstLow]], ymax = .data[[y_fcstUp]], fill = "full sample"), alpha = 0.2) +
geom_ribbon(data = ForecastOutOFSample_df, aes(x = date, ymin = .data[[y_fcstLow]], ymax = .data[[y_fcstUp]], fill = "out-of-sample"), alpha = 0.1) +
scale_color_manual(name = "", values = c("Tendance" = "black", "Projection" = "blue", "Projection out-of-sample" = "red")) +
scale_fill_manual(name = "Intervalles de prévisions", values = c("full sample" = "blue", "out-of-sample" = "red")) +
scale_x_date(date_label = "%Y-%m") +
theme_minimal(base_size = 8) +
theme(plot.title = element_text(size = 11)) +
labs(x = NULL, y = NULL, title = title, fill = "Intervalles de prévisions")
}
# Create the plots using the function
gR <- PlotEpiVar(Forecast_df, "R", "R_sm", "R.fcst", "R.fcstLow", "R.fcstUp", "Taux de reproduction effectif (Reff)")
gcas <- PlotEpiVar(Forecast_df, "cas", "cas_sm", "cas.fcst", "cas.fcstLow", "cas.fcstUp", "Cas confirmés (date de prélèvement)")
ghosp <- PlotEpiVar(Forecast_df, "hosp", "hosp_sm", "hosp.fcst", "hosp.fcstLow", "hosp.fcstUp", "Lits en hospitalisation conventionnelle")
grea <- PlotEpiVar(Forecast_df, "rea", "rea_sm", "rea.fcst", "rea.fcstLow", "rea.fcstUp", "Lits en soins critiques")
gdc <- PlotEpiVar(Forecast_df, "dc", "dc_sm", "dc.fcst", "dc.fcstLow", "dc.fcstUp", "Décès hospitaliers")
print(gR)
# Function to create the common structure of the plots
PlotEpiVar <- function(data, y, y_sm, y_fcst, y_fcstLow, y_fcstUp, title) {
ggplot(data = data) +
geom_point(aes(x = date, y = .data[[y]]), color = "grey") +
geom_line(aes(x = date, y = .data[[y_sm]], color = "Tendance")) +
geom_line(aes(x = date, y = .data[[y_fcst]], color = "Projection")) +
geom_line(data = ForecastOutOFSample_df, aes(x = date, y = .data[[y_fcst]], color = "Projection out-of-sample")) +
geom_ribbon(aes(x = date, ymin = .data[[y_fcstLow]], ymax = .data[[y_fcstUp]], fill = "full sample"), alpha = 0.2) +
geom_ribbon(data = ForecastOutOFSample_df, aes(x = date, ymin = .data[[y_fcstLow]], ymax = .data[[y_fcstUp]], fill = "out-of-sample"), alpha = 0.1) +
scale_color_manual(name = "", values = c("Tendance" = "black", "Projection" = "blue", "Projection out-of-sample" = "red")) +
scale_fill_manual(name = "Intervalles de prévisions", values = c("full sample" = "blue", "out-of-sample" = "red")) +
scale_x_date(date_label = "%Y-%m") +
theme_minimal(base_size = 8) +
theme(plot.title = element_text(size = 11), legend.position="topleft") +
labs(x = NULL, y = NULL, title = title, fill = "Intervalles de prévisions")
}
# Create the plots using the function
gR <- PlotEpiVar(Forecast_df, "R", "R_sm", "R.fcst", "R.fcstLow", "R.fcstUp", "Taux de reproduction effectif (Reff)")
gcas <- PlotEpiVar(Forecast_df, "cas", "cas_sm", "cas.fcst", "cas.fcstLow", "cas.fcstUp", "Cas confirmés (date de prélèvement)")
ghosp <- PlotEpiVar(Forecast_df, "hosp", "hosp_sm", "hosp.fcst", "hosp.fcstLow", "hosp.fcstUp", "Lits en hospitalisation conventionnelle")
grea <- PlotEpiVar(Forecast_df, "rea", "rea_sm", "rea.fcst", "rea.fcstLow", "rea.fcstUp", "Lits en soins critiques")
gdc <- PlotEpiVar(Forecast_df, "dc", "dc_sm", "dc.fcst", "dc.fcstLow", "dc.fcstUp", "Décès hospitaliers")
print(gR)
TitleGraph = paste("Projection EpiVAR ")
gEpiVAR <- ggarrange(
gR,
gcas,
ghosp,
grea,
gdc,
ncol = 1,
nrow = 5,
legend = "bottom",
common.legend = TRUE,
labels = "auto",
align = "hv"
) %>%
annotate_figure(
top = text_grob(
TitleGraph,
just = "top",
face = "bold",
size = 12
),
bottom = text_grob(
"Source: Santé Publique France. \nModèle et calculs : P. Aldama @paldama.",
hjust = 1,
x = 1,
face = "italic",
size = 10
)
)
ggsave(
"./gEpiVAR.png",
plot = gEpiVAR,
bg = "white",
width = 8,
height = 10
)
print(gEpiVAR)
source("~/Library/Mobile Documents/com~apple~CloudDocs/Documents/Covid/ExcessMortality.R")
