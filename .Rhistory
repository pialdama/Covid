install.packages("tresthor")
install.packages(c("Deriv","tidyverse","scales","splitstackshape","assertthat","Matrix","cointReg","Rcpp",
"RcppArmadillo","gsubfn"))
install.packages("~/Downloads/opale-en-r-tresthor-main/tresthor_1.0.0.tar.gz", repos = NULL, type = "source")
?tresthor
library(tresthor)
?tresthor
?tresthor_help
system.file("Opale","opale.txt",package = "tresthor")
/Library/Frameworks/R.framework/Versions/4.2/Resources/library/tresthor/Opale/opale.txt
view("/Library/Frameworks/R.framework/Versions/4.2/Resources/library/tresthor/Opale/opale.txt")
print("/Library/Frameworks/R.framework/Versions/4.2/Resources/library/tresthor/Opale/opale.txt")
open(/Library/Frameworks/R.framework/Versions/4.2/Resources/library/tresthor/Opale/opale.txt)
open("/Library/Frameworks/R.framework/Versions/4.2/Resources/library/tresthor/Opale/opale.txt")
setwd("~/Documents/tresthor/")
setwd("~/Documents/tresthor/")
library(tresthor)
### Opale : création de l'objet thoR.model
create_model(model_name = "Opale",
model_source = system.file("Opale","opale.txt",package = "tresthor"),rcpp = FALSE)
## Si Rcpp doit être utilisé :
create_model(model_name = "Opale",
model_source = system.file("Opale","opale.txt",package = "tresthor"),rcpp = TRUE)
list2DF(eqns_list)
library(tresthor)
### Opale : création de l'objet thoR.model
create_model(model_name = "Opale",
model_source = system.file("Opale","opale.txt",package = "tresthor"),rcpp = FALSE)
library(tresthor)
### Opale : création de l'objet thoR.model
create_model(model_name = "Opale",
model_source = system.file("Opale","opale.txt",package = "tresthor"),rcpp = FALSE)
model_source = system.file("Opale","opale.txt",package = "tresthor")
model_source
sample_n(dictionnaire_variables_opale,size = 10)
dictionnaire<-sample_n(dictionnaire_variables_opale,size = 10)
View(dictionnaire)
dictionnaire<-sample_n(dictionnaire_variables_opale,size = NULL)
dictionnaire<-dictionnaire_variables_opale
library(tresthor)
### Opale : création de l'objet thoR.model
create_model(model_name = "Opale",
model_source = system.file("Opale","opale.txt",package = "tresthor"),rcpp = FALSE)
?create_model
?list2DF
eqns_list
source("~/Documents/Covid/EpiVARinR.R", echo=TRUE)
library(tresthor)
### Opale : création de l'objet thoR.model
create_model(model_name = "Opale",
model_source = system.file("Opale","opale.txt",package = "tresthor"),rcpp = FALSE)
list2DF
create_model()
create_model
library(tresthor)
### Opale : création de l'objet thoR.model
create_model(model_name = "Opale",
model_source = system.file("Opale","opale.txt",package = "tresthor"),rcpp = FALSE)
create_model
view(create_model)
?view
library(tresthor)
### Opale : création de l'objet thoR.model
create_model(model_name = "Opale",
model_source = system.file("Opale","opale.txt",package = "tresthor"),rcpp = FALSE)
### Opale : création de l'objet thoR.model
create_model(model_name = "Opale",
model_source = system.file("Opale","opale.txt",package = "tresthor"),rcpp = FALSE)
source("~/.active-rstudio-document", echo=TRUE)
library(tresthor)
### Opale : création de l'objet thoR.model
create_model(model_name = "Opale",
model_source = system.file("Opale","opale.txt",package = "tresthor"),rcpp = FALSE)
library(tresthor)
### Opale : création de l'objet thoR.model
create_model(model_name = "Opale",
model_source = system.file("Opale","opale.txt",package = "tresthor"),rcpp = FALSE)
library(tresthor)
### Opale : création de l'objet thoR.model
create_model(model_name = "Opale",
model_source = system.file("Opale","opale.txt",package = "tresthor"),rcpp = FALSE)
library(tresthor)
### Opale : création de l'objet thoR.model
create_model(model_name = "Opale",
model_source = system.file("Opale","opale.txt",package = "tresthor"),rcpp = FALSE)
library(tresthor)
### Opale : création de l'objet thoR.model
create_model(model_name = "Opale",
model_source = system.file("Opale","opale.txt",
package = "tresthor"),
rcpp = FALSE)
list2DF()
list2DF
unique
unique
ggplot(data = filter(dbspf, dbspf$date > "2020-07-01")) +
geom_line(aes(x = date, y = REpiEstim, color = "R: EpiEstim"), size =1) +
geom_point(aes(x = date, y = R, color = "R: SPF"), linetype="solid", size = 0.7) +
geom_line(aes(x = date, y = Re, color = "R: Moy. mobile de la croissance hebdomadaire"),size = 0.3) +
geom_hline(yintercept = 1, size = 0.3) +
scale_x_date(date_label = "%Y-%m") +
scale_color_manual(
name = "",
values = c(
"R: EpiEstim" = "blue",
"R: SPF" = "black",
"R: Moy. mobile de la croissance hebdomadaire" =
"red"
)
) +
labs(
y = "R",
x = NULL,
title = "Estimation du taux de reproduction effectif et comparaison à la mesure SPF",
caption = "Notes : calcul du R effectif à partir du package EpiEstim (mean_si = 5.19, std_si = 0.42). \nSource: Santé Publique France. \n Calculs : P. Aldama @paldama"
) +
theme_pubr(base_size = 8) + theme(legend.position = "bottom")
source("~/Documents/Covid/EpiVARinR.R", echo=TRUE)
# Parametres: NB de lags du VAR et niveau de l'intervalle de confiance pour la prevision
nlags <- 28
ConfidenceLevel <- 0.9
# Preparation du dataset
OutofSample <- 0
HorizonForecast <- 7 * (2)
LengthGraph <- 4 * 30 # longueur des graphiques
debFcst <- LastObsCas - OutofSample
dateFcst <-
seq(
from = as.Date(debFcst - OutofSample + 1),
to = as.Date(debFcst - OutofSample + HorizonForecast),
by = 'day'
)
FirstDayFcst <- debFcst + 1
DataEpiVAR <- db %>%
mutate(R =  log(REpiEstim/lag(REpiEstim, 1)))  %>%
mutate(cas = log(cas_sm / lag(cas_sm, 1))) %>%
mutate(hosp = log(hosp_sm / lag(hosp_sm, 1))) %>%
mutate(rea = log(rea_sm / lag(rea_sm, 1))) %>%
mutate(dc = log(dc_sm / lag(dc_sm, 1))) %>%
filter(date < LastObs - OutofSample) %>%
subset(select = c(R, cas, hosp, rea, dc)) %>%
na.omit %>%
ts()
# Estimation VAR
EpiVAR <- VAR(DataEpiVAR,
p = nlags,
type = "none")
# Test de stabilité du VAR
if (max(roots(EpiVAR)) < 1) {
print("EpiVAR is stationary")
print(paste("Max root =", round(max(roots(
EpiVAR
)) , 2)))
} else {
print("EpiVAR is non stationary!")
print(paste("Max root =", round(max(roots(
EpiVAR
)) , 2)))
exit()
}
checkresiduals(EpiVAR$varresult$R)
checkresiduals(EpiVAR$varresult$cas)
checkresiduals(EpiVAR$varresult$hosp)
checkresiduals(EpiVAR$varresult$rea)
checkresiduals(EpiVAR$varresult$dc)
# Forecasts
Forecast <- predict(EpiVAR,
n.ahead = HorizonForecast,
pi = ConfidenceLevel,
dumvar = NULL)
Forecast_df <- as.data.frame(lapply(Forecast$fcst, unlist)) %>%
subset(select = -c(R.CI, cas.CI, hosp.CI, rea.CI, dc.CI)) %>%
mutate_all(function(x)
exp(cumsum(x))) %>%
mutate(date = dateFcst) %>%
full_join(db, Forecast_df, by = "date") %>%
mutate(R.fcst = R.fcst * REpiEstim[date == debFcst]) %>%
mutate(R.fcstUp = R.upper * REpiEstim[date == debFcst]) %>%
mutate(R.fcstLow = R.lower * REpiEstim[date == debFcst]) %>%
mutate(cas.fcst = cas.fcst * cas_sm[date == debFcst]) %>%
mutate(cas.fcstUp = cas.upper * cas_sm[date == debFcst]) %>%
mutate(cas.fcstLow = cas.lower * cas_sm[date == debFcst]) %>%
mutate(hosp.fcst = hosp.fcst * hosp_sm[date == debFcst]) %>%
mutate(hosp.fcstUp = hosp.upper * hosp_sm[date == debFcst]) %>%
mutate(hosp.fcstLow = hosp.lower * hosp_sm[date == debFcst]) %>%
mutate(rea.fcst = rea.fcst * rea_sm[date == debFcst]) %>%
mutate(rea.fcstUp = rea.upper * rea_sm[date == debFcst]) %>%
mutate(rea.fcstLow = rea.lower * rea_sm[date == debFcst]) %>%
mutate(dc.fcst = dc.fcst * dc_sm[date == debFcst]) %>%
mutate(dc.fcstUp = dc.upper * dc_sm[date == debFcst]) %>%
mutate(dc.fcstLow = dc.lower * dc_sm[date == debFcst]) %>%
arrange(desc(date)) %>%
filter(date >= as.Date(LastObs - LengthGraph))
?lapply
View(Forecast_df)
c("R","cas","hosp","rea","dc")
t<-c("R","cas","hosp","rea","dc")
t<-list("R","cas","hosp","rea","dc")
lapply( list("R","cas","hosp","rea","dc"), function(x)
mutate(x.fcst = R.fcst * REpiEstim[date == debFcst]) %>%
mutate(x.fcstUp = R.fcstUp * REpiEstim[date == debFcst]) %>%
mutate(x.fcstLow = R.fcstLow * REpiEstim[date == debFcst]) %>%
)
lapply( list("R","cas","hosp","rea","dc"), function(x)
mutate(x.fcst = R.fcst * REpiEstim[date == debFcst])
mutate(x.fcstUp = R.fcstUp * REpiEstim[date == debFcst])
Forecast_df <- as.data.frame(lapply(Forecast$fcst, unlist)) %>%
subset(select = -c(R.CI, cas.CI, hosp.CI, rea.CI, dc.CI)) %>%
mutate_all(function(x)
exp(cumsum(x))) %>%
mutate(date = dateFcst) %>%
full_join(db, Forecast_df, by = "date") %>%
lapply( list("R","cas","hosp","rea","dc"), function(x)
mutate(x.fcst = R.fcst * REpiEstim[date == debFcst]) %>%
mutate(x.fcstUp = R.fcstUp * REpiEstim[date == debFcst]) %>%
mutate(x.fcstLow = R.fcstLow * REpiEstim[date == debFcst])
) %>%
arrange(desc(date)) %>%
filter(date >= as.Date(LastObs - LengthGraph))
Forecast_df <- as.data.frame(lapply(Forecast$fcst, unlist)) %>%
subset(select = -c(R.CI, cas.CI, hosp.CI, rea.CI, dc.CI)) %>%
mutate_all(function(x)
exp(cumsum(x))) %>%
mutate(date = dateFcst) %>%
full_join(db, Forecast_df, by = "date") %>%
lapply( list(R,cas,hosp,rea,dc), function(x)
mutate(x.fcst = R.fcst * REpiEstim[date == debFcst]) %>%
mutate(x.fcstUp = R.fcstUp * REpiEstim[date == debFcst]) %>%
mutate(x.fcstLow = R.fcstLow * REpiEstim[date == debFcst])
) %>%
arrange(desc(date)) %>%
filter(date >= as.Date(LastObs - LengthGraph))
list(R,cas,hosp,rea,dc)
Forecast_df <- as.data.frame(lapply(Forecast$fcst, unlist)) %>%
subset(select = -c(R.CI, cas.CI, hosp.CI, rea.CI, dc.CI)) %>%
mutate_all(function(x)
exp(cumsum(x))) %>%
mutate(date = dateFcst) %>%
full_join(db, Forecast_df, by = "date") %>%
lapply(t, function(x)
mutate(x.fcst = R.fcst * REpiEstim[date == debFcst]) %>%
mutate(x.fcstUp = R.fcstUp * REpiEstim[date == debFcst]) %>%
mutate(x.fcstLow = R.fcstLow * REpiEstim[date == debFcst])
) %>%
arrange(desc(date)) %>%
filter(date >= as.Date(LastObs - LengthGraph))
source("~/Documents/Covid/EpiVARinR.R", echo=TRUE)
