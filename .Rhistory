)
ggsave(
"./gIRF.png",
plot = gIRF,
bg = "white",
width = 8,
height = 8
)
print(gIRF)
#################################################
# Forecast Error Variance Decomposition
#################################################
fevd <- fevd(EpiVAR,
n.ahead = horizonIRFFEVD)
fevd_df <- as.data.frame(lapply(fevd, unlist)) %>%
mutate(period = c(1:horizonIRFFEVD)) %>%
pivot_longer(
cols = !period,
names_to = c("response", "impulse"),
names_pattern = "(.*)\\.(.*)",
values_to = "values",
values_drop_na = TRUE
)
gFEVD <- fevd_df %>%
ggplot(aes(x = period, y = values, fill = impulse)) +
geom_area(stat = "identity",
position = "stack") +
theme_pubr(base_size = 8) + scale_fill_viridis(discrete = TRUE) +
ggtitle(
"Décomposition de la variance de l'erreur de prévision selon les chocs dans le modèle EpiVAR"
) +
facet_grid(.~factor(response, levels = c("R", "cas", "hosp", "rea", "dc")) ) +
theme(
plot.title = element_text(size = 11, face = "bold", hjust = 0.5),
axis.title.y = element_text(size = 11)
) +
labs(
x = "jours",
y = "% de la variance expliquée",
fill = "Chocs",
caption = "Source: Santé Publique France. \nModèle et calculs : P. Aldama @paldama."
)
print(gFEVD)
ggsave(
"./gFEVD.png",
plot = gFEVD,
bg = "white",
width = 8,
height = 4
)
}
rmarkdown::render("OutputEpiVAR.Rmd")
source("~/Documents/Covid/EpiVARinR.R", echo=TRUE)
ggplot(data = dbspf) +
geom_point(aes(x = date, y = pos_7j / 7, color = "Brut")) +
geom_line(aes(x = date, y = posAdj, color = "Corrigé des jours fériés")) +
scale_y_continuous(labels = label_number(suffix = " k", scale = 1e-3)) +
scale_x_date(date_label = "%Y-%m") +
theme_pubr(base_size = 8) +
theme(legend.position = "bottom") +
scale_color_manual(name = "",
values = c("Brut" = "blue",
"Corrigé des jours fériés" = "red")) +
labs(
y = NULL,
x = NULL,
title = "Nombre de cas positifs, moyenne sur 7 jours glissants",
caption = "Notes : correction des jours fériés d'après la méthode SPF. \nSource: Santé Publique France. \n Calculs : P. Aldama @paldama"
)
ggplot(data = dbspf) +
geom_line(aes(x = date, y = pos_7j / 7, color = "Brut"), size=0.8) +
geom_line(aes(x = date, y = posAdj, color = "Corrigé des jours fériés"), size=1.2) +
scale_y_continuous(labels = label_number(suffix = " k", scale = 1e-3)) +
scale_x_date(date_label = "%Y-%m") +
theme_pubr(base_size = 8) +
theme(legend.position = "bottom") +
scale_color_manual(name = "",
values = c("Brut" = "blue",
"Corrigé des jours fériés" = "red")) +
labs(
y = NULL,
x = NULL,
title = "Nombre de cas positifs, moyenne sur 7 jours glissants",
caption = "Notes : correction des jours fériés d'après la méthode SPF. \nSource: Santé Publique France. \n Calculs : P. Aldama @paldama"
)
ggplot(data = dbspf) +
geom_line(aes(x = date, y = pos_7j / 7, color = "Brut"), size=0.4) +
geom_line(aes(x = date, y = posAdj, color = "Corrigé des jours fériés"), size=.8) +
scale_y_continuous(labels = label_number(suffix = " k", scale = 1e-3)) +
scale_x_date(date_label = "%Y-%m") +
theme_pubr(base_size = 8) +
theme(legend.position = "bottom") +
scale_color_manual(name = "",
values = c("Brut" = "blue",
"Corrigé des jours fériés" = "red")) +
labs(
y = NULL,
x = NULL,
title = "Nombre de cas positifs, moyenne sur 7 jours glissants",
caption = "Notes : correction des jours fériés d'après la méthode SPF. \nSource: Santé Publique France. \n Calculs : P. Aldama @paldama"
)
source("~/Documents/Covid/EpiVARinR.R", echo=TRUE)
source("~/Documents/Covid/EpiVARinR.R", echo=TRUE)
ggplot(data = dbspf) +
geom_line(aes(x = date, y = pos_7j / 7, color = "Brut"), size=0.4) +
geom_line(aes(x = date, y = posAdj, color = "Corrigé des jours fériés"), size=.8) +
scale_y_continuous(labels = label_number(suffix = " k", scale = 1e-3, trans="log2")) +
scale_x_date(date_label = "%Y-%m") +
theme_pubr(base_size = 8) +
theme(legend.position = "bottom") +
scale_color_manual(name = "",
values = c("Brut" = "blue",
"Corrigé des jours fériés" = "red")) +
labs(
y = NULL,
x = NULL,
title = "Nombre de cas positifs, moyenne sur 7 jours glissants",
caption = "Notes : correction des jours fériés d'après la méthode SPF. \nSource: Santé Publique France. \n Calculs : P. Aldama @paldama"
)
ggplot(data = dbspf) +
geom_line(aes(x = date, y = pos_7j / 7, color = "Brut"), size=0.4) +
geom_line(aes(x = date, y = posAdj, color = "Corrigé des jours fériés"), size=.8) +
scale_y_log2(labels = label_number(suffix = " k", scale = 1e-3)) +
scale_x_date(date_label = "%Y-%m") +
theme_pubr(base_size = 8) +
theme(legend.position = "bottom") +
scale_color_manual(name = "",
values = c("Brut" = "blue",
"Corrigé des jours fériés" = "red")) +
labs(
y = NULL,
x = NULL,
title = "Nombre de cas positifs, moyenne sur 7 jours glissants",
caption = "Notes : correction des jours fériés d'après la méthode SPF. \nSource: Santé Publique France. \n Calculs : P. Aldama @paldama"
)
ggplot(data = dbspf) +
geom_line(aes(x = date, y = pos_7j / 7, color = "Brut"), size=0.4) +
geom_line(aes(x = date, y = posAdj, color = "Corrigé des jours fériés"), size=.8) +
scale_y_log10(labels = label_number(suffix = " k", scale = 1e-3)) +
scale_x_date(date_label = "%Y-%m") +
theme_pubr(base_size = 8) +
theme(legend.position = "bottom") +
scale_color_manual(name = "",
values = c("Brut" = "blue",
"Corrigé des jours fériés" = "red")) +
labs(
y = NULL,
x = NULL,
title = "Nombre de cas positifs, moyenne sur 7 jours glissants",
caption = "Notes : correction des jours fériés d'après la méthode SPF. \nSource: Santé Publique France. \n Calculs : P. Aldama @paldama"
)
ggplot(data = dbspf) +
geom_line(aes(x = date, y = pos_7j / 7, color = "Brut"), size=0.4) +
geom_line(aes(x = date, y = posAdj, color = "Corrigé des jours fériés"), size=.8) +
scale_y_log10(labels = label_number(suffix = " k", scale = 1e-3)) +
scale_x_date(date_label = "%Y-%m") +
theme_pubr(base_size = 8) +
theme(legend.position = "bottom") +
scale_color_manual(name = "",
values = c("Brut" = "blue",
"Corrigé des jours fériés" = "red")) +
labs(
y = NULL,
x = NULL,
title = "Nombre de cas positifs, moyenne sur 7 jours glissants (échelle log en base 10)",
caption = "Notes : correction des jours fériés d'après la méthode SPF. \nSource: Santé Publique France. \n Calculs : P. Aldama @paldama"
)
source("~/Documents/Covid/EpiVARinR.R", echo=TRUE)
ggplot(data = Forecast_df) +
geom_point(aes(x = date, y = posAdj), color = "grey") +
geom_line(aes(x = date, y = cas_sm, color = "Tendance")) +
geom_line(aes(x = date, y = cas.fcst, color = "Projection")) +
geom_ribbon(
aes(
x = date,
ymin = cas.fcstLow,
ymax = cas.fcstUp,
fill = "Intervalle de prévision"
),
alpha = 0.2
)  +
geom_line(data = ForecastOutOFSample_df,
aes(x = date, y = cas.fcst, color = "Projection out-of-sample")) +
geom_ribbon(
data = ForecastOutOFSample_df,
aes(
x = date,
ymin = cas.fcstLow,
ymax = cas.fcstUp,
fill = "Intervalle de prévision out-of-sample"
),
alpha = 0.1
)  +
scale_color_manual(
name  = "",
values = c(
"Tendance" = "black",
"Projection" = "blue",
"Projection out-of-sample" = "red"
)
) +
scale_fill_manual(
name = "",
values = c(
"Intervalle de prévision" = "blue" ,
"Intervalle de prévision out-of-sample" = "red"
)
) +
scale_y_continuous(labels = label_number(suffix = " k", scale = 1e-3)) +
scale_x_date(date_label = "%Y-%m") +
theme_pubr(base_size = 8) + theme(plot.title = element_text(size = 11)) +
labs(x = NULL, y = NULL , title = "Cas confirmés (date de prélèvement)")
source("~/Documents/Covid/EpiVARinR.R", echo=TRUE)
source("~/Documents/Covid/EpiVARinR.R", echo=TRUE)
source("~/Documents/Covid/EpiVARinR.R", echo=TRUE)
source("~/Documents/Covid/EpiVARinR.R", echo=TRUE)
# Parametres: NB de lags du VAR et niveau de l'intervalle de confiance pour la prevision
nlags <- 21
# Parametres: NB de lags du VAR et niveau de l'intervalle de confiance pour la prevision
nlags <- 21
ConfidenceLevel <- 0.9
# Preparation du dataset
OutofSample <- 0
HorizonForecast <- 7 * (2)
LengthGraph <- 4 * 30 # longueur des graphiques
debFcst <- LastObsCas - OutofSample
dateFcst <-
seq(
from = as.Date(debFcst - OutofSample + 1),
to = as.Date(debFcst - OutofSample + HorizonForecast),
by = 'day'
)
FirstDayFcst <- debFcst + 1
DataEpiVAR <- db %>%
mutate(R =  log(REpiEstim/lag(REpiEstim, 1)))  %>%
mutate(cas = log(cas_sm / lag(cas_sm, 1))) %>%
mutate(hosp = log(hosp_sm / lag(hosp_sm, 1))) %>%
mutate(rea = log(rea_sm / lag(rea_sm, 1))) %>%
mutate(dc = log(dc_sm / lag(dc_sm, 1))) %>%
filter(date < LastObs - OutofSample) %>%
subset(select = c(R, cas, hosp, rea, dc)) %>%
na.omit %>%
ts()
# Estimation VAR
EpiVAR <- VAR(DataEpiVAR,
p = nlags,
type = "none")
# Parametres: NB de lags du VAR et niveau de l'intervalle de confiance pour la prevision
nlags <- 35
ConfidenceLevel <- 0.9
# Preparation du dataset
OutofSample <- 0
HorizonForecast <- 7 * (2)
LengthGraph <- 4 * 30 # longueur des graphiques
debFcst <- LastObsCas - OutofSample
dateFcst <-
seq(
from = as.Date(debFcst - OutofSample + 1),
to = as.Date(debFcst - OutofSample + HorizonForecast),
by = 'day'
)
FirstDayFcst <- debFcst + 1
DataEpiVAR <- db %>%
mutate(R =  log(REpiEstim/lag(REpiEstim, 1)))  %>%
mutate(cas = log(cas_sm / lag(cas_sm, 1))) %>%
mutate(hosp = log(hosp_sm / lag(hosp_sm, 1))) %>%
mutate(rea = log(rea_sm / lag(rea_sm, 1))) %>%
mutate(dc = log(dc_sm / lag(dc_sm, 1))) %>%
filter(date < LastObs - OutofSample) %>%
subset(select = c(R, cas, hosp, rea, dc)) %>%
na.omit %>%
ts()
# Estimation VAR
EpiVAR <- VAR(DataEpiVAR,
p = nlags,
type = "none")
# Test de stabilité du VAR
if (max(roots(EpiVAR)) < 1) {
print("EpiVAR is stationary")
print(paste("Max root =", round(max(roots(
EpiVAR
)) , 2)))
} else {
print("EpiVAR is non stationary!")
print(paste("Max root =", round(max(roots(
EpiVAR
)) , 2)))
exit()
}
checkresiduals(EpiVAR$varresult$R,lag=nlags)
checkresiduals(EpiVAR$varresult$cas,lag=nlags)
checkresiduals(EpiVAR$varresult$hosp,lag=nlags)
checkresiduals(EpiVAR$varresult$rea,lag=nlags)
checkresiduals(EpiVAR$varresult$dc,lag=nlags)
checkresiduals(EpiVAR$varresult$hosp)
checkresiduals(EpiVAR$varresult$rea)
checkresiduals(EpiVAR$varresult$dc)
checkresiduals(EpiVAR$varresult$R)
# Parametres: NB de lags du VAR et niveau de l'intervalle de confiance pour la prevision
nlags <- 21
ConfidenceLevel <- 0.9
# Preparation du dataset
OutofSample <- 0
HorizonForecast <- 7 * (2)
LengthGraph <- 4 * 30 # longueur des graphiques
debFcst <- LastObsCas - OutofSample
dateFcst <-
seq(
from = as.Date(debFcst - OutofSample + 1),
to = as.Date(debFcst - OutofSample + HorizonForecast),
by = 'day'
)
FirstDayFcst <- debFcst + 1
DataEpiVAR <- db %>%
mutate(R =  log(REpiEstim/lag(REpiEstim, 1)))  %>%
mutate(cas = log(cas_sm / lag(cas_sm, 1))) %>%
mutate(hosp = log(hosp_sm / lag(hosp_sm, 1))) %>%
mutate(rea = log(rea_sm / lag(rea_sm, 1))) %>%
mutate(dc = log(dc_sm / lag(dc_sm, 1))) %>%
filter(date < LastObs - OutofSample) %>%
subset(select = c(R, cas, hosp, rea, dc)) %>%
na.omit %>%
ts()
# Estimation VAR
EpiVAR <- VAR(DataEpiVAR,
p = nlags,
type = "none")
# Test de stabilité du VAR
if (max(roots(EpiVAR)) < 1) {
print("EpiVAR is stationary")
print(paste("Max root =", round(max(roots(
EpiVAR
)) , 2)))
} else {
print("EpiVAR is non stationary!")
print(paste("Max root =", round(max(roots(
EpiVAR
)) , 2)))
exit()
}
checkresiduals(EpiVAR$varresult$R)
checkresiduals(EpiVAR$varresult$cas)
checkresiduals(EpiVAR$varresult$hosp)
checkresiduals(EpiVAR$varresult$rea)
checkresiduals(EpiVAR$varresult$dc)
# Parametres: NB de lags du VAR et niveau de l'intervalle de confiance pour la prevision
nlags <- 28
ConfidenceLevel <- 0.9
# Preparation du dataset
OutofSample <- 0
HorizonForecast <- 7 * (2)
LengthGraph <- 4 * 30 # longueur des graphiques
debFcst <- LastObsCas - OutofSample
dateFcst <-
seq(
from = as.Date(debFcst - OutofSample + 1),
to = as.Date(debFcst - OutofSample + HorizonForecast),
by = 'day'
)
FirstDayFcst <- debFcst + 1
DataEpiVAR <- db %>%
mutate(R =  log(REpiEstim/lag(REpiEstim, 1)))  %>%
mutate(cas = log(cas_sm / lag(cas_sm, 1))) %>%
mutate(hosp = log(hosp_sm / lag(hosp_sm, 1))) %>%
mutate(rea = log(rea_sm / lag(rea_sm, 1))) %>%
mutate(dc = log(dc_sm / lag(dc_sm, 1))) %>%
filter(date < LastObs - OutofSample) %>%
subset(select = c(R, cas, hosp, rea, dc)) %>%
na.omit %>%
ts()
# Estimation VAR
EpiVAR <- VAR(DataEpiVAR,
p = nlags,
type = "none")
# Test de stabilité du VAR
if (max(roots(EpiVAR)) < 1) {
print("EpiVAR is stationary")
print(paste("Max root =", round(max(roots(
EpiVAR
)) , 2)))
} else {
print("EpiVAR is non stationary!")
print(paste("Max root =", round(max(roots(
EpiVAR
)) , 2)))
exit()
}
checkresiduals(EpiVAR$varresult$R)
checkresiduals(EpiVAR$varresult$cas)
checkresiduals(EpiVAR$varresult$hosp)
checkresiduals(EpiVAR$varresult$rea)
checkresiduals(EpiVAR$varresult$dc)
?checkresiduals
EpiVAR$varresult$R
EpiVAR$varresult$R$residuals
checkresiduals(EpiVAR$varresult$R$residuals,lag=14)
checkresiduals(EpiVAR$varresult$R,lag=14)
checkresiduals(EpiVAR$varresult$R,lag=7)
checkresiduals(EpiVAR$varresult$R,lag=50)
checkresiduals(EpiVAR$varresult$R)
source("~/Documents/Covid/EpiVARinR.R", echo=TRUE)
serial.test(EpiVAR, lags.pt=50, type=”PT.asymptotic”)
?serial.test
serial.test(EpiVAR, lags.pt=50, type="BG")
serial.test(EpiVAR, lags.pt=150, type="BG")
serial.test(EpiVAR, lags.pt=300, type="BG")
serial.test(EpiVAR, lags.pt=100, type="PT.adjusted")
serial.test(EpiVAR, lags.pt=50, type="PT.adjusted")
serial.test(EpiVAR, lags.pt=10, type="PT.adjusted")
serial.test(EpiVAR, lags.pt=15, type="PT.adjusted")
serial.test(EpiVAR, lags.pt=70, type="PT.adjusted")
serial.test(EpiVAR, type=c("PT.adjusted","BG")
)
serial.test(EpiVAR, type=c("PT.adjusted","BG"))
serial.test(EpiVAR, type=c("PT.adjusted"))
serial.test(EpiVAR, type=c("PT.asymptotic"))
serial.test(EpiVAR, type="PT.asymptotic")
serial.test(EpiVAR, lags.pt=50, type="PT.asymptotic")
# Parametres: NB de lags du VAR et niveau de l'intervalle de confiance pour la prevision
nlags <- 70
ConfidenceLevel <- 0.9
# Preparation du dataset
OutofSample <- 0
HorizonForecast <- 7 * (2)
LengthGraph <- 4 * 30 # longueur des graphiques
debFcst <- LastObsCas - OutofSample
dateFcst <-
seq(
from = as.Date(debFcst - OutofSample + 1),
to = as.Date(debFcst - OutofSample + HorizonForecast),
by = 'day'
)
FirstDayFcst <- debFcst + 1
DataEpiVAR <- db %>%
mutate(R =  log(REpiEstim/lag(REpiEstim, 1)))  %>%
mutate(cas = log(cas_sm / lag(cas_sm, 1))) %>%
mutate(hosp = log(hosp_sm / lag(hosp_sm, 1))) %>%
mutate(rea = log(rea_sm / lag(rea_sm, 1))) %>%
mutate(dc = log(dc_sm / lag(dc_sm, 1))) %>%
filter(date < LastObs - OutofSample) %>%
subset(select = c(R, cas, hosp, rea, dc)) %>%
na.omit %>%
ts()
# Estimation VAR
EpiVAR <- VAR(DataEpiVAR,
p = nlags,
type = "none")
# Test de stabilité du VAR
if (max(roots(EpiVAR)) < 1) {
print("EpiVAR is stationary")
print(paste("Max root =", round(max(roots(
EpiVAR
)) , 2)))
} else {
print("EpiVAR is non stationary!")
print(paste("Max root =", round(max(roots(
EpiVAR
)) , 2)))
exit()
}
checkresiduals(EpiVAR$varresult$R)
checkresiduals(EpiVAR$varresult$cas)
checkresiduals(EpiVAR$varresult$hosp)
checkresiduals(EpiVAR$varresult$rea)
checkresiduals(EpiVAR$varresult$dc)
# Parametres: NB de lags du VAR et niveau de l'intervalle de confiance pour la prevision
nlags <- 28
ConfidenceLevel <- 0.9
# Preparation du dataset
OutofSample <- 0
HorizonForecast <- 7 * (2)
LengthGraph <- 4 * 30 # longueur des graphiques
debFcst <- LastObsCas - OutofSample
dateFcst <-
seq(
from = as.Date(debFcst - OutofSample + 1),
to = as.Date(debFcst - OutofSample + HorizonForecast),
by = 'day'
)
FirstDayFcst <- debFcst + 1
DataEpiVAR <- db %>%
mutate(R =  log(REpiEstim/lag(REpiEstim, 1)))  %>%
mutate(cas = log(cas_sm / lag(cas_sm, 1))) %>%
mutate(hosp = log(hosp_sm / lag(hosp_sm, 1))) %>%
mutate(rea = log(rea_sm / lag(rea_sm, 1))) %>%
mutate(dc = log(dc_sm / lag(dc_sm, 1))) %>%
filter(date < LastObs - OutofSample) %>%
subset(select = c(R, cas, hosp, rea, dc)) %>%
na.omit %>%
ts()
# Estimation VAR
EpiVAR <- VAR(DataEpiVAR,
p = nlags,
type = "none")
# Test de stabilité du VAR
if (max(roots(EpiVAR)) < 1) {
print("EpiVAR is stationary")
print(paste("Max root =", round(max(roots(
EpiVAR
)) , 2)))
} else {
print("EpiVAR is non stationary!")
print(paste("Max root =", round(max(roots(
EpiVAR
)) , 2)))
exit()
}
checkresiduals(EpiVAR$varresult$R)
checkresiduals(EpiVAR$varresult$cas)
checkresiduals(EpiVAR$varresult$hosp)
checkresiduals(EpiVAR$varresult$rea)
checkresiduals(EpiVAR$varresult$dc)
