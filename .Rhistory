restart()
clc
source("~/Documents/Covid/EpiVARinR.R", echo=TRUE)
install.packages(c("bit", "bslib", "callr", "car", "commonmark", "data.table", "digest", "DT", "evaluate", "fontawesome", "fracdiff", "future", "future.apply", "ggplot2", "ggpubr", "ggrepel", "gmp", "installr", "jsonlite", "knitr", "lava", "lme4", "lubridate", "maptools", "Matrix", "mclust", "minqa", "modelr", "openssl", "pcaPP", "pkgload", "plotly", "plyr", "processx", "ps", "ragg", "RcppArmadillo", "RcppEigen", "recipes", "rmarkdown", "roxygen2", "rstatix", "rugarch", "sass", "shiny", "slider", "sp", "sys", "tidyquant", "timetk", "vctrs", "xfun", "xts", "yaml", "zip"))
install.packages(c("bit", "bslib", "callr", "car", "commonmark", "data.table", "digest", "DT", "evaluate", "fontawesome", "fracdiff", "future", "future.apply", "ggplot2", "ggpubr", "ggrepel", "gmp", "installr", "jsonlite", "knitr", "lava", "lme4", "lubridate", "maptools", "Matrix", "mclust", "minqa", "modelr", "openssl", "pcaPP", "pkgload", "plotly", "plyr", "processx", "ps", "ragg", "RcppArmadillo", "RcppEigen", "recipes", "rmarkdown", "roxygen2", "rstatix", "rugarch", "sass", "shiny", "slider", "sp", "sys", "tidyquant", "timetk", "vctrs", "xfun", "xts", "yaml", "zip"))
install.packages(c("bit", "bslib", "callr", "car", "commonmark", "data.table", "digest", "DT", "evaluate", "fontawesome", "fracdiff", "future", "future.apply", "ggplot2", "ggpubr", "ggrepel", "gmp", "installr", "jsonlite", "knitr", "lava", "lme4", "lubridate", "maptools", "Matrix", "mclust", "minqa", "modelr", "openssl", "pcaPP", "pkgload", "plotly", "plyr", "processx", "ps", "ragg", "RcppArmadillo", "RcppEigen", "recipes", "rmarkdown", "roxygen2", "rstatix", "rugarch", "sass", "shiny", "slider", "sp", "sys", "tidyquant", "timetk", "vctrs", "xfun", "xts", "yaml", "zip"))
fevd <- fevd(EpiVAR,
n.ahead = 60)
source("~/Documents/Covid/EpiVARinR.R", echo=TRUE)
install.packages(tidyverse)
install.packages("tidyverse")
install.packages("tidyverse")
install.packages("tidyverse")
install.packages(c("bit", "bslib", "callr", "car", "commonmark", "data.table", "digest", "DT", "evaluate", "fontawesome", "fracdiff", "future", "future.apply", "ggplot2", "ggpubr", "ggrepel", "gmp", "installr", "jsonlite", "knitr", "lava", "lme4", "lubridate", "maptools", "Matrix", "mclust", "minqa", "modelr", "openssl", "pcaPP", "pkgload", "plotly", "plyr", "processx", "ps", "ragg", "RcppArmadillo", "RcppEigen", "recipes", "rmarkdown", "roxygen2", "rstatix", "rugarch", "sass", "shiny", "slider", "sp", "sys", "tidyquant", "timetk", "vctrs", "xfun", "xts", "yaml", "zip"))
install.packages(c("bit", "bslib", "callr", "car", "commonmark", "data.table", "digest", "DT", "evaluate", "fontawesome", "fracdiff", "future", "future.apply", "ggplot2", "ggpubr", "ggrepel", "gmp", "installr", "jsonlite", "knitr", "lava", "lme4", "lubridate", "maptools", "Matrix", "mclust", "minqa", "modelr", "openssl", "pcaPP", "pkgload", "plotly", "plyr", "processx", "ps", "ragg", "RcppArmadillo", "RcppEigen", "recipes", "rmarkdown", "roxygen2", "rstatix", "rugarch", "sass", "shiny", "slider", "sp", "sys", "tidyquant", "timetk", "vctrs", "xfun", "xts", "yaml", "zip"))
detach("package:base", unload = TRUE)
detach("package:methods", unload = TRUE)
detach("package:stats", unload = TRUE)
detach("package:utils", unload = TRUE)
detach("package:graphics", unload = TRUE)
detach("package:grDevices", unload = TRUE)
detach("package:datasets", unload = TRUE)
install.packages(c("bit", "bslib", "callr", "car", "commonmark", "data.table", "digest", "DT", "evaluate", "fontawesome", "fracdiff", "future", "future.apply", "ggplot2", "ggpubr", "ggrepel", "gmp", "installr", "jsonlite", "knitr", "lava", "lme4", "lubridate", "maptools", "Matrix", "mclust", "minqa", "modelr", "openssl", "pcaPP", "pkgload", "plotly", "plyr", "processx", "ps", "ragg", "RcppArmadillo", "RcppEigen", "recipes", "rmarkdown", "roxygen2", "rstatix", "rugarch", "sass", "shiny", "slider", "sp", "sys", "tidyquant", "timetk", "vctrs", "xfun", "xts", "yaml", "zip"))
setwd("~/Documents/Covid")
source("~/Documents/Covid/EpiVARinR.R", echo=TRUE)
install.packages("svars")
library(svars)
EpiVAR<-id.chol(EpiVAR)
irf<-irf(EpiVAR,
impulse = c("R","cas","hosp","rea","dc"),
response = NULL,
n.ahead = 60,
ortho = TRUE,
cumulative = TRUE,
boot = TRUE,
ci = 0.95,
runs = 100 )
multiple_varirf <- extract_varirf(irf) %>%
pivot_longer(
cols = !period,
names_to = c("type","impulse","response"),
names_pattern = "(.*)_(.*)_(.*)",
values_to = "values",
values_drop_na = TRUE
) %>%
pivot_wider(names_from = type, values_from = values)
plot(irf, scales = 'free_y')
irfboot<-wild.boot(
EpiVAR,
design = "fixed",
distr = "rademacher",
n.ahead = 60,
nboot = 500,
nc = 1,
dd = NULL,
signrest = NULL,
signcheck = FALSE,
itermax = 300,
steptol = 200,
iter2 = 50
)
plot(irfboot, scales = 'free_y')
irfboot<-wild.boot(
EpiVAR,
n.ahead = 60,
nboot = 500,
nc = 1,
dd = NULL,
)
plot(irfboot, lowerq=0.16, upperq=0.84, scales = 'free_y')
pp<-plot(irfboot, lowerq=0.16, upperq=0.84, scales = 'free_y')
pp%>%
labs(title="Impulse-response functions to a Cholesky shock")
print(pp)
# Forecasts
Forecast<-predict(EpiVAR,
n.ahead = HorizonForecast,
pi = ConfidenceLevel,
dumvar = NULL)
# Preparation du dataset
k<-2
OutofSample<-7*k
HorizonForecast<-7*k+3
LengthGraph <- 2*30 # longueur des graphiques
debFcst<-LastObsCas-OutofSample
dateFcst<-seq(from = as.Date(LastObsCas-OutofSample+1), to = as.Date(LastObsCas-OutofSample+HorizonForecast), by = 'day')
FirstDayFcst<-debFcst+1
DataEpiVAR <- db %>%
mutate(R = log(REpiEstim/lag(REpiEstim,1))) %>%
mutate(cas = log(cas_sm/lag(cas_sm,1))) %>%
mutate(hosp = log(hosp_sm/lag(hosp_sm,1))) %>%
mutate(rea = log(rea_sm/lag(rea_sm,1))) %>%
mutate(dc = log(dc_sm/lag(dc_sm,1))) %>%
filter(date < LastObs-OutofSample) %>%
subset(select = c(R,cas,hosp,rea,dc)) %>%
na.omit %>%
ts()
# Estimation VAR
EpiVAR<-VAR(DataEpiVAR,
p=nlags,
type="trend")
summary(EpiVAR)
# Test de stabilitÃ© du VAR
if ( max(roots(EpiVAR))<1 ) {
print("EpiVAR is stationary")
print(paste("Max root =", round(max(roots(EpiVAR)) , 2) ))
} else {
print("EpiVAR is non stationary!")
print(paste("Max root =", round(max(roots(EpiVAR)) , 2) ))
exit()
}
# checkresiduals(EpiVAR$varresult$R)
# checkresiduals(EpiVAR$varresult$cas)
# checkresiduals(EpiVAR$varresult$hosp)
# checkresiduals(EpiVAR$varresult$rea)
# checkresiduals(EpiVAR$varresult$dc)
# Forecasts
Forecast<-predict(EpiVAR,
n.ahead = HorizonForecast,
pi = ConfidenceLevel,
dumvar = NULL)
fevd_df <- as.data.frame(lapply(Forecast, unlist))
lapply(Forecast, unlist)
Forecast<-predict(EpiVAR,
n.ahead = HorizonForecast,
pi = ConfidenceLevel,
dumvar = NULL)
Forecast_df <- as.data.frame(lapply(Forecast, unlist))
Forecast_df<-lapply(Forecast, unlist)
Forecast_df
Forecast$fcst
test<-Forecast$fcst$R
as.data.frame(test)
?lapply
Forecast_df <- lapply(Forecast, unlist)
Forecast_df$fcst
Forecast_df <- lapply(Forecast, unlist, USENAMES = TRUE)
View(Forecast_df)
fevd <- fevd(EpiVAR,
n.ahead = 60)
fevd$R
Forecast$fcst$R
lapply(Forecast$R,unlist)
test<-as.data.frame(lapply(Forecast$fcst))
test<-as.data.frame(lapply(Forecast$fcst$R))
test<-as.data.frame(lapply(Forecast))
test<-as.dataframe(lapply(Forecast))
test<-as.data.frame(lapply(Forecast$fcst,unlist))
Forecast_df <- as.data.frame(lapply(Forecast$fcst,unlist)) %>%
mutate(period = dateFcst
)
Forecast_df
Forecast_df <- as.data.frame(lapply(Forecast$fcst,unlist)) %>%
mutate(period = dateFcst ) %>%
pivot_longer(
cols = !dateFcst,
names_to = c("variable","output"),
names_pattern = "(.*)\\.(.*)",
values_to = "values",
values_drop_na = TRUE
)
fevd <- fevd(EpiVAR,
n.ahead = 60)
fevd_df <- as.data.frame(lapply(fevd, unlist)) %>%
mutate(period = c(1:60) )
fevd_df
fevd_df <- as.data.frame(lapply(fevd, unlist)) %>%
mutate(periodb = c(1:60) ) %>%
pivot_longer(
cols = !periodb,
names_to = c("response","impulse"),
names_pattern = "(.*)\\.(.*)",
values_to = "values",
values_drop_na = TRUE
)
fevd_df
fevd <- fevd(EpiVAR,
n.ahead = 60)
fevd_df <- as.data.frame(lapply(fevd, unlist)) %>%
mutate(period = c(1:60) ) %>%
pivot_longer(
cols = !period,
names_to = c("response","impulse"),
names_pattern = "(.*)\\.(.*)",
values_to = "values",
values_drop_na = TRUE
)
fevd_df
Forecast_df <- as.data.frame(lapply(Forecast$fcst,unlist)) %>%
mutate(period = dateFcst ) %>%
pivot_longer(
cols = !period,
names_to = c("variable","output"),
names_pattern = "(.*)\\.(.*)",
values_to = "values",
values_drop_na = TRUE
)
Forecast_df
ggplot(Forecast_df) + geom_line(aes(x=period,y=output,color=output))
ggplot(Forecast_df) + geom_line(aes(x=period,y=value,color=output))
ggplot(Forecast_df) + geom_line(aes(x=period,y=values,color=output))
ggplot(Forecast_df) + geom_line(aes(x=period,y=values,color=output)) + facet_grid(.variable)
ggplot(Forecast_df) + geom_line(aes(x=period,y=values,color=output)) + facet_grid(.~variable)
