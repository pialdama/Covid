# Lissage
db$index<-1:nrow(db)
paramAlign <- "right"
db <- db %>%
mutate(hospmean = rollapply(hosp,7,sum,align=paramAlign,fill=NA)/7) %>%
mutate(reamean = rollapply(rea,7,sum,align=paramAlign,fill=NA)/7) %>%
mutate(incid_dchospmean = rollapply(incid_dchosp,7,sum,align=paramAlign,fill=NA)/7)
db$cas<-db$pos
db$cas_sm<-db$posAdj
cas_sm_model<-loess(cas_sm ~ index,data = db ,span=0.05)
db$cas_sm<-predict(cas_sm_model,newdata = db,na.action = na.exclude)
ggplot(data=db) +
geom_point(aes(x=date,y=posAdj),color = "black") +
geom_line(aes(x=date,y=cas_sm), color = "red") +
labs(title = "Cas positifs (corrigés des jours fériés)")
hosp_sm_model<-loess(hospmean ~ index,data = db ,span=0.05)
db$hosp_sm<-predict(hosp_sm_model,newdata = db, na.action = na.exclude)
ggplot(data=db) +
geom_point(aes(x=date,y=hosp),color = "black") +
geom_line(aes(x=date,y=hosp_sm),color = "red") +
labs(title = "Lits en hospitalisation conventionnelle")
rea_sm_model<-loess(reamean ~ index,data = db ,span=0.05)
db$rea_sm<-predict(rea_sm_model,newdata = db, na.action = na.exclude)
ggplot(data=db) +
geom_point(aes(x=date,y=reamean),color = "black") +
geom_line(aes(x=date,y=rea_sm),color = "red") +
labs(title = "Lits en soins critiques")
db$dc <- db$incid_dchospmean
dc_sm_model<-loess(dc ~ index,data = db ,span=0.05)
db$dc_sm<-predict(dc_sm_model,newdata = db, na.action = na.exclude)
ggplot(data=db) +
geom_point(aes(x=date,y=dc),color = "black") +
geom_line(aes(x=date,y=dc_sm),color = "red") +
labs(title = "Décès hospitaliers")
####################################################
# Estimation et forecast full-sample
####################################################
# Parametres: NB de lags du VAR et niveau de l'intervalle de confiance pour la prevision
nlags<-14
ConfidenceLevel <- 0.8
# Preparation du dataset
OutofSample<-0
HorizonForecast<-7*(2)
LengthGraph <- 5*30 # longueur des graphiques
debFcst<-LastObsCas-OutofSample
dateFcst<-seq(from = as.Date(debFcst-OutofSample+1), to = as.Date(debFcst-OutofSample+HorizonForecast), by = 'day')
FirstDayFcst<-debFcst+1
DataEpiVAR <- db %>%
mutate(R = log(REpiEstim/lag(REpiEstim,1))) %>%
mutate(cas = log(cas_sm/lag(cas_sm,1))) %>%
mutate(hosp = log(hosp_sm/lag(hosp_sm,1))) %>%
mutate(rea = log(rea_sm/lag(rea_sm,1))) %>%
mutate(dc = log(dc_sm/lag(dc_sm,1))) %>%
filter(date < LastObs-OutofSample) %>%
subset(select = c(R,cas,hosp,rea,dc)) %>%
na.omit %>%
ts()
# Estimation VAR
EpiVAR<-VAR(DataEpiVAR,
p=nlags,
type="trend")
# Test de stabilité du VAR
if ( max(roots(EpiVAR))<1 ) {
print("EpiVAR is stationary")
print(paste("Max root =", round(max(roots(EpiVAR)) , 2) ))
} else {
print("EpiVAR is non stationary!")
print(paste("Max root =", round(max(roots(EpiVAR)) , 2) ))
exit()
}
# checkresiduals(EpiVAR$varresult$R)
# checkresiduals(EpiVAR$varresult$cas)
# checkresiduals(EpiVAR$varresult$hosp)
# checkresiduals(EpiVAR$varresult$rea)
# checkresiduals(EpiVAR$varresult$dc)
# Forecasts
Forecast<-predict(EpiVAR,
n.ahead = HorizonForecast,
pi = ConfidenceLevel,
dumvar = NULL)
Forecast_df <- as.data.frame(lapply(Forecast$fcst,unlist)) %>%
subset( select = -c(R.CI,cas.CI,hosp.CI,rea.CI,dc.CI)) %>%
mutate_all( function(x) exp(cumsum(x))) %>%
mutate(date = dateFcst ) %>%
full_join(db,Forecast_df,by = "date") %>%
mutate(R.fcst = R.fcst*REpiEstim[date==debFcst]) %>%
mutate(R.fcstUp = R.upper*REpiEstim[date==debFcst]) %>%
mutate(R.fcstLow = R.lower*REpiEstim[date==debFcst]) %>%
mutate(cas.fcst = cas.fcst*cas_sm[date==debFcst]) %>%
mutate(cas.fcstUp = cas.upper*cas_sm[date==debFcst]) %>%
mutate(cas.fcstLow = cas.lower*cas_sm[date==debFcst]) %>%
mutate(hosp.fcst = hosp.fcst*hosp_sm[date==debFcst]) %>%
mutate(hosp.fcstUp = hosp.upper*hosp_sm[date==debFcst]) %>%
mutate(hosp.fcstLow = hosp.lower*hosp_sm[date==debFcst]) %>%
mutate(rea.fcst = rea.fcst*rea_sm[date==debFcst]) %>%
mutate(rea.fcstUp = rea.upper*rea_sm[date==debFcst]) %>%
mutate(rea.fcstLow = rea.lower*rea_sm[date==debFcst]) %>%
mutate(dc.fcst = dc.fcst*dc_sm[date==debFcst]) %>%
mutate(dc.fcstUp = dc.upper*dc_sm[date==debFcst]) %>%
mutate(dc.fcstLow = dc.lower*dc_sm[date==debFcst]) %>%
arrange( desc(date)) %>%
filter(  date >= as.Date(LastObs-LengthGraph))
`
####################################################
# Structural VAR
####################################################
amat<-diag(5) # 5 restrictions sur la diagonale
amat[2,1] <- NA
amat[1,2] <- NA
amat[2,3] <- NA
amat[3,4] <- NA
amat[4,3] <- NA
amat
SEpiVAR<-SVAR(EpiVAR,
estmethod= "direct",
Amat = amat,
Bmat = NULL,
hessian =TRUE,
method = "BFGS")
sirf<-irf(SEpiVAR,
cumulative = TRUE,
boot = TRUE,
ci = 0.95,
runs = 1000 )
`
####################################################
# Structural VAR
####################################################
amat<-diag(5) # 5 restrictions sur la diagonale
amat[2,1] <- NA
amat[1,2] <- NA
amat[2,3] <- NA
amat[3,4] <- NA
amat[4,3] <- NA
amat
SEpiVAR<-SVAR(EpiVAR,
estmethod= "direct",
Amat = amat,
Bmat = NULL,
hessian =TRUE,
method = "BFGS")
sirf<-irf(SEpiVAR,
cumulative = TRUE,
boot = TRUE,
ci = 0.95,
runs = 1000 )
sirf
?irf
sirf<-irf(SEpiVAR,
n.ahead = 60,
cumulative = TRUE,
boot = FALSE,
ci = 0.90,
runs = 100 )
multiple_varirf <- extract_varirf(sirf) %>%
pivot_longer(
cols = !period,
names_to = c("type","impulse","response"),
names_pattern = "(.*)_(.*)_(.*)",
values_to = "values",
values_drop_na = TRUE
) %>%
pivot_wider(names_from = type, values_from = values)
download.file("https://raw.githubusercontent.com/anguyen1210/var-tools/master/R/extract_varirf.R",
"./extract_varirf.R")
source("./extract_varirf.R")
multiple_varirf <- extract_varirf(sirf) %>%
pivot_longer(
cols = !period,
names_to = c("type","impulse","response"),
names_pattern = "(.*)_(.*)_(.*)",
values_to = "values",
values_drop_na = TRUE
) %>%
pivot_wider(names_from = type, values_from = values)
multiple_varirf <- extract_varirf(sirf)
sirf
as.data.frame(lapply(sirf,unlist))
as.data.frame(lapply(sirf$irf,unlist))
extract_varirf()
extract_varirf
sirf<-irf(SEpiVAR,
n.ahead = 60,
cumulative = TRUE,
boot = TRUE,
ci = 0.90,
runs = 100 )
multiple_varirf <- extract_varirf(sirf) %>%
pivot_longer(
cols = !period,
names_to = c("type","impulse","response"),
names_pattern = "(.*)_(.*)_(.*)",
values_to = "values",
values_drop_na = TRUE
) %>%
pivot_wider(names_from = type, values_from = values)
gIRF<-multiple_varirf %>%
ggplot(aes(x=period, y=irf*100, ymin=lower*100, ymax=upper*100)) +
geom_hline(yintercept = 0, color="black") +
geom_ribbon(aes(fill=impulse), alpha=.1) +
geom_line(aes(color = impulse), size = 0.8) +
theme_bw() + scale_color_viridis(discrete=TRUE) + scale_fill_viridis(discrete=TRUE) +
ggtitle("Fonctions impulsion-réponse orthogonalisées du modèle EpiVAR")+
facet_grid(factor(impulse, levels = c("r","cas","hosp","rea","dc"))~factor(response, levels = c("r","cas","hosp","rea","dc")),scale="free")+
scale_x_continuous(sec.axis = sec_axis(~ . , name = "Réponses des variables", breaks = NULL, labels = NULL)) +
scale_y_continuous(sec.axis = sec_axis(~ . , name = "Impulsions", breaks = NULL, labels = NULL)) +
theme(plot.title = element_text(size = 11,face="bold", hjust=0.5),
axis.title.y = element_text(size=11)) +
labs(x = "jours",
y = "écart en %",
fill = "Chocs",
color = "Chocs",
caption = "Les intervalles de confiance sont les 5ème et 95ème percentiles de la distribution obtenue par boostrapp. \nSource: Santé Publique France. \nModèle et calculs : P. Aldama @paldama.")
ggsave("./gIRF.png",plot=gIRF,bg="white",width=8,height = 8)
print(gIRF)
sirf<-irf(SEpiVAR,
n.ahead = 60,
ortho = FALSE,
cumulative = TRUE,
boot = TRUE,
ci = 0.90,
runs = 100 )
SEpiVAR$A
inv(SEpiVAR$A)
inv(amat)
?inv
library(Matrix)
inv(amat)
solve(amat)
amat^(-1)
1/SEpiVAR$A
amat<-diag(5) # 5 restrictions sur la diagonale
#amat[2,1] <- NA
amat[1,2] <- NA
amat[2,3] <- NA
amat[3,4] <- NA
#amat[4,3] <- NA
amat
SEpiVAR<-SVAR(EpiVAR,
estmethod= "direct",
Amat = amat,
Bmat = NULL,
hessian =TRUE,
method = "BFGS")
1/SEpiVAR$A
solve(SEpiVAR$As)
solve(SEpiVAR$A)
amat<-diag(5) # 5 restrictions sur la diagonale
amat[2,1] <- NA
amat[1,2] <- NA
amat[2,3] <- NA
amat[3,4] <- NA
amat[4,3] <- NA
amat
SEpiVAR<-SVAR(EpiVAR,
estmethod= "direct",
Amat = amat,
Bmat = NULL,
hessian =TRUE,
method = "BFGS")
solve(SEpiVAR$A)
A<-SEpiVAR$A
invA<-solve(A)
invA*t(invA)
EpiVAR
Vcov<-EpiVAR$covres
Vcov
Vcov<-summary(EpiVAR)$covres
Vcov
invA*t(invA)
summary(EpiVAR)$covres
A<-SEpiVAR$A
A*t(A)
Cholesky(summary(EpiVAR)$covres)
Cholesky
Chol(summary(EpiVAR)$covres)
chol(summary(EpiVAR)$covres)
t(chol(summary(EpiVAR)$covres))
chol(summary(EpiVAR)$covres)
C<-chol(summary(EpiVAR)$covres)
c
C
t(C)
a <- diag(1, 3)
a[lower.tri(a)] <- NA
a
SEpiVAR<-SVAR(EpiVAR,
estmethod= "direct",
Amat = a,
Bmat = NULL,
hessian =TRUE,
method = "BFGS")
a <- diag(1, 5)
a[lower.tri(a)] <- NA
a
SEpiVAR<-SVAR(EpiVAR,
estmethod= "direct",
Amat = a,
Bmat = NULL,
hessian =TRUE,
method = "BFGS")
sirf<-irf(SEpiVAR,
n.ahead = 60,
ortho = FALSE,
cumulative = TRUE,
boot = TRUE,
ci = 0.90,
runs = 100 )
multiple_varirf <- extract_varirf(sirf) %>%
pivot_longer(
cols = !period,
names_to = c("type","impulse","response"),
names_pattern = "(.*)_(.*)_(.*)",
values_to = "values",
values_drop_na = TRUE
) %>%
pivot_wider(names_from = type, values_from = values)
gIRF<-multiple_varirf %>%
ggplot(aes(x=period, y=irf*100, ymin=lower*100, ymax=upper*100)) +
geom_hline(yintercept = 0, color="black") +
geom_ribbon(aes(fill=impulse), alpha=.1) +
geom_line(aes(color = impulse), size = 0.8) +
theme_bw() + scale_color_viridis(discrete=TRUE) + scale_fill_viridis(discrete=TRUE) +
ggtitle("Fonctions impulsion-réponse orthogonalisées du modèle EpiVAR")+
facet_grid(factor(impulse, levels = c("r","cas","hosp","rea","dc"))~factor(response, levels = c("r","cas","hosp","rea","dc")),scale="free")+
scale_x_continuous(sec.axis = sec_axis(~ . , name = "Réponses des variables", breaks = NULL, labels = NULL)) +
scale_y_continuous(sec.axis = sec_axis(~ . , name = "Impulsions", breaks = NULL, labels = NULL)) +
theme(plot.title = element_text(size = 11,face="bold", hjust=0.5),
axis.title.y = element_text(size=11)) +
labs(x = "jours",
y = "écart en %",
fill = "Chocs",
color = "Chocs",
caption = "Les intervalles de confiance sont les 5ème et 95ème percentiles de la distribution obtenue par boostrapp. \nSource: Santé Publique France. \nModèle et calculs : P. Aldama @paldama.")
ggsave("./gIRF.png",plot=gIRF,bg="white",width=8,height = 8)
print(gIRF)
sirf$irf$R
sirf<-irf(SEpiVAR,
n.ahead = 60,
ortho = TRUE,
cumulative = TRUE,
boot = TRUE,
ci = 0.90,
runs = 100 )
sirf$irf$R
b <- diag(1, 5)
b[lower.tri(b)] <- NA
b
SEpiVAR<-SVAR(EpiVAR,
estmethod= "direct",
Amat = NULL,
Bmat = b,
hessian =TRUE,
method = "BFGS")
sirf<-irf(SEpiVAR,
n.ahead = 60,
ortho = TRUE,
cumulative = TRUE,
boot = TRUE,
ci = 0.90,
runs = 100 )
SEpiVAR<-SVAR(EpiVAR,
estmethod= "direct",
Amat = NULL,
Bmat = b,
hessian =FALSE,
method = "BFGS")
sirf<-irf(SEpiVAR,
n.ahead = 60,
ortho = TRUE,
cumulative = TRUE,
boot = TRUE,
ci = 0.90,
runs = 100 )
multiple_varirf <- extract_varirf(sirf) %>%
pivot_longer(
cols = !period,
names_to = c("type","impulse","response"),
names_pattern = "(.*)_(.*)_(.*)",
values_to = "values",
values_drop_na = TRUE
) %>%
pivot_wider(names_from = type, values_from = values)
gIRF<-multiple_varirf %>%
ggplot(aes(x=period, y=irf*100, ymin=lower*100, ymax=upper*100)) +
geom_hline(yintercept = 0, color="black") +
geom_ribbon(aes(fill=impulse), alpha=.1) +
geom_line(aes(color = impulse), size = 0.8) +
theme_bw() + scale_color_viridis(discrete=TRUE) + scale_fill_viridis(discrete=TRUE) +
ggtitle("Fonctions impulsion-réponse orthogonalisées du modèle EpiVAR")+
facet_grid(factor(impulse, levels = c("r","cas","hosp","rea","dc"))~factor(response, levels = c("r","cas","hosp","rea","dc")),scale="free")+
scale_x_continuous(sec.axis = sec_axis(~ . , name = "Réponses des variables", breaks = NULL, labels = NULL)) +
scale_y_continuous(sec.axis = sec_axis(~ . , name = "Impulsions", breaks = NULL, labels = NULL)) +
theme(plot.title = element_text(size = 11,face="bold", hjust=0.5),
axis.title.y = element_text(size=11)) +
labs(x = "jours",
y = "écart en %",
fill = "Chocs",
color = "Chocs",
caption = "Les intervalles de confiance sont les 5ème et 95ème percentiles de la distribution obtenue par boostrapp. \nSource: Santé Publique France. \nModèle et calculs : P. Aldama @paldama.")
ggsave("./gIRF.png",plot=gIRF,bg="white",width=8,height = 8)
print(gIRF)
sirf<-irf(SEpiVAR,
n.ahead = 150,
ortho = TRUE,
cumulative = TRUE,
boot = TRUE,
ci = 0.95,
runs = 100 )
multiple_varirf <- extract_varirf(sirf) %>%
pivot_longer(
cols = !period,
names_to = c("type","impulse","response"),
names_pattern = "(.*)_(.*)_(.*)",
values_to = "values",
values_drop_na = TRUE
) %>%
pivot_wider(names_from = type, values_from = values)
gIRF<-multiple_varirf %>%
ggplot(aes(x=period, y=irf*100, ymin=lower*100, ymax=upper*100)) +
geom_hline(yintercept = 0, color="black") +
geom_ribbon(aes(fill=impulse), alpha=.1) +
geom_line(aes(color = impulse), size = 0.8) +
theme_bw() + scale_color_viridis(discrete=TRUE) + scale_fill_viridis(discrete=TRUE) +
ggtitle("Fonctions impulsion-réponse orthogonalisées du modèle EpiVAR")+
facet_grid(factor(impulse, levels = c("r","cas","hosp","rea","dc"))~factor(response, levels = c("r","cas","hosp","rea","dc")),scale="free")+
scale_x_continuous(sec.axis = sec_axis(~ . , name = "Réponses des variables", breaks = NULL, labels = NULL)) +
scale_y_continuous(sec.axis = sec_axis(~ . , name = "Impulsions", breaks = NULL, labels = NULL)) +
theme(plot.title = element_text(size = 11,face="bold", hjust=0.5),
axis.title.y = element_text(size=11)) +
labs(x = "jours",
y = "écart en %",
fill = "Chocs",
color = "Chocs",
caption = "Les intervalles de confiance sont les 5ème et 95ème percentiles de la distribution obtenue par boostrapp. \nSource: Santé Publique France. \nModèle et calculs : P. Aldama @paldama.")
ggsave("./gIRF.png",plot=gIRF,bg="white",width=8,height = 8)
print(gIRF)
irf<-irf(EpiVAR,
impulse = c("R","cas","hosp","rea","dc"),
response = NULL,
n.ahead = 60,
ortho = TRUE,
cumulative = TRUE,
boot = TRUE,
ci = 0.95,
runs = 100 )
multiple_varirf <- extract_varirf(irf) %>%
pivot_longer(
cols = !period,
names_to = c("type","impulse","response"),
names_pattern = "(.*)_(.*)_(.*)",
values_to = "values",
values_drop_na = TRUE
) %>%
pivot_wider(names_from = type, values_from = values)
gIRF<-multiple_varirf %>%
ggplot(aes(x=period, y=irf*100, ymin=lower*100, ymax=upper*100)) +
geom_hline(yintercept = 0, color="black") +
geom_ribbon(aes(fill=impulse), alpha=.1) +
geom_line(aes(color = impulse), size = 0.8) +
theme_bw() + scale_color_viridis(discrete=TRUE) + scale_fill_viridis(discrete=TRUE) +
ggtitle("Fonctions impulsion-réponse orthogonalisées du modèle EpiVAR")+
facet_grid(factor(impulse, levels = c("r","cas","hosp","rea","dc"))~factor(response, levels = c("r","cas","hosp","rea","dc")),scale="free")+
scale_x_continuous(sec.axis = sec_axis(~ . , name = "Réponses des variables", breaks = NULL, labels = NULL)) +
scale_y_continuous(sec.axis = sec_axis(~ . , name = "Impulsions", breaks = NULL, labels = NULL)) +
theme(plot.title = element_text(size = 11,face="bold", hjust=0.5),
axis.title.y = element_text(size=11)) +
labs(x = "jours",
y = "écart en %",
fill = "Chocs",
color = "Chocs",
caption = "Les intervalles de confiance sont les 5ème et 95ème percentiles de la distribution obtenue par boostrapp. \nSource: Santé Publique France. \nModèle et calculs : P. Aldama @paldama.")
ggsave("./gIRF.png",plot=gIRF,bg="white",width=8,height = 8)
print(gIRF)
irf<-irf(EpiVAR,
impulse = c("R","cas","hosp","rea","dc"),
response = NULL,
n.ahead = 120,
ortho = TRUE,
cumulative = TRUE,
boot = TRUE,
ci = 0.95,
runs = 100 )
multiple_varirf <- extract_varirf(irf) %>%
pivot_longer(
cols = !period,
names_to = c("type","impulse","response"),
names_pattern = "(.*)_(.*)_(.*)",
values_to = "values",
values_drop_na = TRUE
) %>%
pivot_wider(names_from = type, values_from = values)
gIRF<-multiple_varirf %>%
ggplot(aes(x=period, y=irf*100, ymin=lower*100, ymax=upper*100)) +
geom_hline(yintercept = 0, color="black") +
geom_ribbon(aes(fill=impulse), alpha=.1) +
geom_line(aes(color = impulse), size = 0.8) +
theme_bw() + scale_color_viridis(discrete=TRUE) + scale_fill_viridis(discrete=TRUE) +
ggtitle("Fonctions impulsion-réponse orthogonalisées du modèle EpiVAR")+
facet_grid(factor(impulse, levels = c("r","cas","hosp","rea","dc"))~factor(response, levels = c("r","cas","hosp","rea","dc")),scale="free")+
scale_x_continuous(sec.axis = sec_axis(~ . , name = "Réponses des variables", breaks = NULL, labels = NULL)) +
scale_y_continuous(sec.axis = sec_axis(~ . , name = "Impulsions", breaks = NULL, labels = NULL)) +
theme(plot.title = element_text(size = 11,face="bold", hjust=0.5),
axis.title.y = element_text(size=11)) +
labs(x = "jours",
y = "écart en %",
fill = "Chocs",
color = "Chocs",
caption = "Les intervalles de confiance sont les 5ème et 95ème percentiles de la distribution obtenue par boostrapp. \nSource: Santé Publique France. \nModèle et calculs : P. Aldama @paldama.")
ggsave("./gIRF.png",plot=gIRF,bg="white",width=8,height = 8)
print(gIRF)
source("~/Documents/Covid/EpiVARinR.R", echo=TRUE)
