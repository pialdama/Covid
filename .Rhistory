DecesFM$coef1 <- c(rep(coef1))
DecesFM$coef2 <- c(rep(coef2))
DecesFM$coef3 <- c(rep(coef3))
DecesFM$coef4 <- c(rep(coef4))
# crée le coefficient de redressement
DecesFE$coefredress <- 1 + DecesFE$coef1/DecesFE$distadj + DecesFE$coef2/(DecesFE$distadj)^2  + DecesFE$coef3/(DecesFE$distadj)^3   + DecesFE$coef4/(DecesFE$distadj)^4
DecesFM$coefredress <- 1 + DecesFM$coef1/DecesFM$distadj + DecesFM$coef2/(DecesFM$distadj)^2  + DecesFM$coef3/(DecesFM$distadj)^3   + DecesFM$coef4/(DecesFM$distadj)^4
# correction des séries de décés
DecesFE$DECES<- DecesFE$DECES*DecesFE$coefredress
DecesFM$DECES<- DecesFM$DECES*DecesFM$coefredress
##############################################################################################
# Aggregation hebdo et estimation de la tendance hors-épidémie
# Importation des données de surveillance épidémique (Grippe, réseau Sentinelles)
Sentinelles<- read_csv("SentinellesIncidenceGrippe.csv",
skip = 1)
Sentinelles$weekTemp<-as.character(Sentinelles$week-1)
Sentinelles$weekTemp<-as.character(
paste(
substr(Sentinelles$week,1,4),
paste("W",substr(Sentinelles$week,5,6),sep=""),
"7",
sep="-")
)
Sentinelles$iso.date <- ISOweek2date(Sentinelles$weekTemp)
Sentinelles$ISO.week <- date2ISOweek(Sentinelles$iso.date)
Sentinelles <- Sentinelles %>%
arrange(ISO.week)
SentinellesMerge<-Sentinelles%>%
subset(select = c(ISO.week,inc100))
# Donnees d'ensemble SPF
url <- "https://www.data.gouv.fr/fr/datasets/r/f335f9ea-86e3-4ffa-9684-93c009d5e617"
dest <- "./spf_donneesensemble.csv"
spf<- download.file(url,dest)
dbspf<- read_csv("spf_donneesensemble.csv")
dbspfhebdo <- dbspf %>%
tq_transmute(select     = incid_dchosp,
mutate_fun = apply.weekly,
FUN        = mean)
dbspfhebdo$incid_dchosp<-round(dbspfhebdo$incid_dchosp*7) #utilise la moyenne pour éviter le biais de semaine incompléte
dbspfhebdo$ISO.week<-date2ISOweek(dbspfhebdo$date)
dbspfhebdo<-subset( dbspfhebdo, select = -date )
# Aggregation hebdo de la série de décés quotidiens
DecesFEhebdo<-DecesFE %>%
tq_transmute(select     = DECES,
mutate_fun = apply.weekly,
FUN        = mean)
DecesFEhebdo$DECES<-DecesFEhebdo$DECES*7 #utilise la moyenne pour éviter le biais de semaine incompléte
DecesFEhebdo$ISO.week<-date2ISOweek(DecesFEhebdo$Date)
DecesFEhebdo$DECES<-round(DecesFEhebdo$DECES)
# Merge des datasets
dbMerge<-left_join(DecesFEhebdo,SentinellesMerge,by = "ISO.week")
dbMerge<-full_join(dbMerge,dbspfhebdo,keep=FALSE,by="ISO.week")
dbMerge$incid_dchosp<-replace_na(dbMerge$incid_dchosp, 0)
dbMergeNAs <- dbMerge[rowSums(is.na(dbMerge)) > 0,]
dbMerge<-drop_na(dbMerge)
dbMerge$Annee<-format(as.Date(dbMerge$Date, format="%d/%m/%Y"),"%Y")
# Estime le modéle quasi-Poisson de 2014 é 2019
dbMerge$t<-c(1:nrow(dbMerge))
dbMerge$cose<-cos(2*pi*dbMerge$t/52)
dbMerge$sine<-sin(2*pi*dbMerge$t/52)
ModelPoissonBis<-glm(
DECES ~ t + cose + sine + inc100:Annee + lead(incid_dchosp,1),
data = filter(dbMerge,dbMerge$Annee >= 2014 & dbMerge$Annee <= 2022),
family = quasipoisson(link="log"),
control = list(maxit = 500))
summary(ModelPoissonBis)
pseudoR2<- 1-(ModelPoissonBis$deviance/ModelPoissonBis$null.deviance)
pseudoR2
phiPoisson<-summary(ModelPoissonBis)$deviance / summary(ModelPoissonBis)$df.residual
# Prediction et écart-type ajusté de la surdispersion
# Sauvegarde les coefficients
coefIntercept<-ModelPoissonBis$coefficients[[ 1 ]]
coefTrend<-ModelPoissonBis$coefficients[[ 2 ]]
coefCos<-ModelPoissonBis$coefficients[[ 3 ]]
coefSin<-ModelPoissonBis$coefficients[[ 4 ]]
dbMerge$DecesAttendus <- exp((coefIntercept + coefTrend*dbMerge$t + coefCos*dbMerge$cose + coefSin*dbMerge$sine))
dbMerge$DecesCovid <- dbMerge$DecesAttendus + lead(dbMerge$incid_dchosp)
dbMerge$DecesAttendusSE <- sqrt(phiPoisson*dbMerge$DecesAttendus )
# Plot les données en time series
gTimeSeriesPoisson<-ggplot(data=filter(dbMerge,dbMerge$Annee>=2014)) +
geom_line(aes(x=Date, y=DECES, color = "obs"),size=0.5) +
geom_line(aes(x=Date, y=DecesAttendus, color = "fit"),size=1) +
scale_color_manual(name =" Nombre de décés ",
labels = c("attendus","observés"),
values = c("obs" = "black", "fit" = "blue"))+
geom_ribbon(aes(x=Date,
ymin = DecesAttendus ,
ymax = DecesCovid,
fill="Décés hospitaliers du COVID"), alpha=0.5) +
geom_ribbon(aes(x=Date,
ymin = DecesAttendus - 1.96*DecesAttendusSE,
ymax = DecesAttendus + 1.96*DecesAttendusSE,
fill="Sur/sous-mortalité normale"), alpha=0.1) +
scale_fill_manual(c("",""),values=c("black","blue")) +
theme_minimal() +
theme(plot.title = element_text(size = 14, face = "bold"),
plot.subtitle = element_text(size = 12),
plot.caption = element_text(size = 10, face = "italic"),
legend.position = "top") +
labs(x = NULL,
y = NULL,
title = "Mortalité hebdomadaire en France",
subtitle = "Nombre de décés observés et attendus en absence d'épidémie (grippale ou Covid19)")
ggsave("gTimeSeriesPoisson.png",plot=gTimeSeriesPoisson, bg="white", height = 7, width =10)
print(gTimeSeriesPoisson)
dbMerge$WeekNum<-substr(ISOweek(dbMerge$Date), 6, 8)
dbMerge$Annee<-substr(ISOweek(dbMerge$Date), 1, 4)
dbMerge$AnneeNum<-as.numeric(dbMerge$Annee)
dbMergeBis<- dbMerge %>%
mutate(ExcesMortalite=DECES-DecesAttendus) %>%
filter(AnneeNum>=2014) %>%
group_by(Annee) %>%
mutate(ExcesMortaliteCumsum=cumsum(ExcesMortalite)) %>%
ungroup() %>%
subset(select = c(Date,ISO.week,ExcesMortaliteCumsum,WeekNum,Annee,AnneeNum))
graph.ExcesMortalite<-ggplot() +
geom_line(data = filter(dbMergeBis, dbMergeBis$AnneeNum>2019),
aes(x=WeekNum, y=ExcesMortaliteCumsum, group = Annee, color = Annee),
show.legend = TRUE,
na.rm=TRUE,
size=2)  +
geom_line(data = filter(dbMergeBis, dbMergeBis$AnneeNum<=2019),
aes(x=WeekNum, y=ExcesMortaliteCumsum, group = Annee ),
show.legend = FALSE,
na.rm=TRUE,
size = 0.5,
color = "grey")  +
geom_smooth(data = filter(dbMergeBis, dbMergeBis$AnneeNum<=2019),
aes(x=WeekNum, y=ExcesMortaliteCumsum, group = 1),
show.legend = FALSE,
na.rm=TRUE,
color = "yellow",
size = 1.5,
span=0.1)  +
scale_y_continuous(breaks=c(0,10000,20000,30000,40000,50000,60000))+
scale_x_discrete(breaks = c("W05","W10","W15","W20","W25","W30", "W35","W40","W45","W50") )+
geom_hline( yintercept = 0)  +
theme_minimal() +
theme(plot.title = element_text(size = 14, face = "bold"),
plot.subtitle = element_text(size = 10),
plot.caption = element_text(size = 10, face = "italic"),
legend.position = "right") +
labs(x = NULL,
y = NULL,
color = "Année",
title = "Excés de mortalité en France en 2020, 2021 et 2022",
subtitle = "La courbe jaune représente l'excés de mortalité moyen sur la période 2014-2019, principlement lié aux épidémies grippales",
caption = "Sources : Santé Publique France, Insee et Réseau Sentinelles.\nCalculs et erreurs : P. Aldama / @paldama")
ggsave("grExcesMortalite.png",plot = graph.ExcesMortalite, bg = "white", width=12)
gMortalite<-ggarrange(gTimeSeriesPoisson,graph.ExcesMortalite,nrow=2)
ggsave("gMortalite.png",plot=gMortalite,bg="white",height=10, width=9)
##############################################################################################
# Aggregation hebdo et estimation de la tendance hors-épidémie
# Importation des données de surveillance épidémique (Grippe, réseau Sentinelles)
Sentinelles<- read_csv("SentinellesIncidenceGrippe.csv",
skip = 1)
Sentinelles$weekTemp<-as.character(Sentinelles$week-1)
Sentinelles$weekTemp<-as.character(
paste(
substr(Sentinelles$week,1,4),
paste("W",substr(Sentinelles$week,5,6),sep=""),
"7",
sep="-")
)
Sentinelles$iso.date <- ISOweek2date(Sentinelles$weekTemp)
Sentinelles$ISO.week <- date2ISOweek(Sentinelles$iso.date)
Sentinelles <- Sentinelles %>%
arrange(ISO.week)
SentinellesMerge<-Sentinelles%>%
subset(select = c(ISO.week,inc100))
# Donnees d'ensemble SPF
url <- "https://www.data.gouv.fr/fr/datasets/r/f335f9ea-86e3-4ffa-9684-93c009d5e617"
dest <- "./spf_donneesensemble.csv"
spf<- download.file(url,dest)
dbspf<- read_csv("spf_donneesensemble.csv")
dbspfhebdo <- dbspf %>%
tq_transmute(select     = incid_dchosp,
mutate_fun = apply.weekly,
FUN        = mean)
dbspfhebdo$incid_dchosp<-round(dbspfhebdo$incid_dchosp*7) #utilise la moyenne pour éviter le biais de semaine incompléte
dbspfhebdo$ISO.week<-date2ISOweek(dbspfhebdo$date)
dbspfhebdo<-subset( dbspfhebdo, select = -date )
# Aggregation hebdo de la série de décés quotidiens
DecesFEhebdo<-DecesFE %>%
tq_transmute(select     = DECES,
mutate_fun = apply.weekly,
FUN        = mean)
DecesFEhebdo$DECES<-DecesFEhebdo$DECES*7 #utilise la moyenne pour éviter le biais de semaine incompléte
DecesFEhebdo$ISO.week<-date2ISOweek(DecesFEhebdo$Date)
DecesFEhebdo$DECES<-round(DecesFEhebdo$DECES)
# Merge des datasets
dbMerge<-left_join(DecesFEhebdo,SentinellesMerge,by = "ISO.week")
dbMerge<-full_join(dbMerge,dbspfhebdo,keep=FALSE,by="ISO.week")
dbMerge$incid_dchosp<-replace_na(dbMerge$incid_dchosp, 0)
dbMergeNAs <- dbMerge[rowSums(is.na(dbMerge)) > 0,]
dbMerge<-drop_na(dbMerge)
dbMerge$Annee<-format(as.Date(dbMerge$Date, format="%d/%m/%Y"),"%Y")
# Estime le modéle quasi-Poisson de 2014 é 2019
dbMerge$t<-c(1:nrow(dbMerge))
dbMerge$cose<-cos(2*pi*dbMerge$t/52)
dbMerge$sine<-sin(2*pi*dbMerge$t/52)
ModelPoissonBis<-glm(
DECES ~ t + cose + sine + inc100:Annee + lead(incid_dchosp,1),
data = filter(dbMerge,dbMerge$Annee >= 2014 & dbMerge$Annee <= 2023),
family = quasipoisson(link="log"),
control = list(maxit = 500))
summary(ModelPoissonBis)
pseudoR2<- 1-(ModelPoissonBis$deviance/ModelPoissonBis$null.deviance)
pseudoR2
phiPoisson<-summary(ModelPoissonBis)$deviance / summary(ModelPoissonBis)$df.residual
# Prediction et écart-type ajusté de la surdispersion
# Sauvegarde les coefficients
coefIntercept<-ModelPoissonBis$coefficients[[ 1 ]]
coefTrend<-ModelPoissonBis$coefficients[[ 2 ]]
coefCos<-ModelPoissonBis$coefficients[[ 3 ]]
coefSin<-ModelPoissonBis$coefficients[[ 4 ]]
dbMerge$DecesAttendus <- exp((coefIntercept + coefTrend*dbMerge$t + coefCos*dbMerge$cose + coefSin*dbMerge$sine))
dbMerge$DecesCovid <- dbMerge$DecesAttendus + lead(dbMerge$incid_dchosp)
dbMerge$DecesAttendusSE <- sqrt(phiPoisson*dbMerge$DecesAttendus )
# Plot les données en time series
gTimeSeriesPoisson<-ggplot(data=filter(dbMerge,dbMerge$Annee>=2014)) +
geom_line(aes(x=Date, y=DECES, color = "obs"),size=0.5) +
geom_line(aes(x=Date, y=DecesAttendus, color = "fit"),size=1) +
scale_color_manual(name =" Nombre de décés ",
labels = c("attendus","observés"),
values = c("obs" = "black", "fit" = "blue"))+
geom_ribbon(aes(x=Date,
ymin = DecesAttendus ,
ymax = DecesCovid,
fill="Décés hospitaliers du COVID"), alpha=0.5) +
geom_ribbon(aes(x=Date,
ymin = DecesAttendus - 1.96*DecesAttendusSE,
ymax = DecesAttendus + 1.96*DecesAttendusSE,
fill="Sur/sous-mortalité normale"), alpha=0.1) +
scale_fill_manual(c("",""),values=c("black","blue")) +
theme_minimal() +
theme(plot.title = element_text(size = 14, face = "bold"),
plot.subtitle = element_text(size = 12),
plot.caption = element_text(size = 10, face = "italic"),
legend.position = "top") +
labs(x = NULL,
y = NULL,
title = "Mortalité hebdomadaire en France",
subtitle = "Nombre de décés observés et attendus en absence d'épidémie (grippale ou Covid19)")
ggsave("gTimeSeriesPoisson.png",plot=gTimeSeriesPoisson, bg="white", height = 7, width =10)
print(gTimeSeriesPoisson)
dbMerge$WeekNum<-substr(ISOweek(dbMerge$Date), 6, 8)
dbMerge$Annee<-substr(ISOweek(dbMerge$Date), 1, 4)
dbMerge$AnneeNum<-as.numeric(dbMerge$Annee)
dbMergeBis<- dbMerge %>%
mutate(ExcesMortalite=DECES-DecesAttendus) %>%
filter(AnneeNum>=2014) %>%
group_by(Annee) %>%
mutate(ExcesMortaliteCumsum=cumsum(ExcesMortalite)) %>%
ungroup() %>%
subset(select = c(Date,ISO.week,ExcesMortaliteCumsum,WeekNum,Annee,AnneeNum))
graph.ExcesMortalite<-ggplot() +
geom_line(data = filter(dbMergeBis, dbMergeBis$AnneeNum>2019),
aes(x=WeekNum, y=ExcesMortaliteCumsum, group = Annee, color = Annee),
show.legend = TRUE,
na.rm=TRUE,
size=2)  +
geom_line(data = filter(dbMergeBis, dbMergeBis$AnneeNum<=2019),
aes(x=WeekNum, y=ExcesMortaliteCumsum, group = Annee ),
show.legend = FALSE,
na.rm=TRUE,
size = 0.5,
color = "grey")  +
geom_smooth(data = filter(dbMergeBis, dbMergeBis$AnneeNum<=2019),
aes(x=WeekNum, y=ExcesMortaliteCumsum, group = 1),
show.legend = FALSE,
na.rm=TRUE,
color = "yellow",
size = 1.5,
span=0.1)  +
scale_y_continuous(breaks=c(0,10000,20000,30000,40000,50000,60000))+
scale_x_discrete(breaks = c("W05","W10","W15","W20","W25","W30", "W35","W40","W45","W50") )+
geom_hline( yintercept = 0)  +
theme_minimal() +
theme(plot.title = element_text(size = 14, face = "bold"),
plot.subtitle = element_text(size = 10),
plot.caption = element_text(size = 10, face = "italic"),
legend.position = "right") +
labs(x = NULL,
y = NULL,
color = "Année",
title = "Excés de mortalité en France en 2020, 2021 et 2022",
subtitle = "La courbe jaune représente l'excés de mortalité moyen sur la période 2014-2019, principlement lié aux épidémies grippales",
caption = "Sources : Santé Publique France, Insee et Réseau Sentinelles.\nCalculs et erreurs : P. Aldama / @paldama")
ggsave("grExcesMortalite.png",plot = graph.ExcesMortalite, bg = "white", width=12)
gMortalite<-ggarrange(gTimeSeriesPoisson,graph.ExcesMortalite,nrow=2)
ggsave("gMortalite.png",plot=gMortalite,bg="white",height=10, width=9)
View(dbMerge)
View(DecesFE23)
View(db2023)
source("~/Library/Mobile Documents/com~apple~CloudDocs/Documents/Covid/prgGraphs.R")
source("~/Library/Mobile Documents/com~apple~CloudDocs/Documents/Covid/prgGraphs.R")
# Plot les données en time series
gTimeSeriesPoisson<-ggplot(data=filter(dbMerge,dbMerge$Annee>=2014)) +
geom_line(aes(x=Date, y=DECES, color = "obs"),size=0.5) +
geom_line(aes(x=Date, y=DecesAttendus, color = "fit"),size=1) +
scale_color_manual(name =" Nombre de décés ",
labels = c("attendus","observés"),
values = c("obs" = "black", "fit" = "blue"))+
geom_ribbon(aes(x=Date,
ymin = DecesAttendus ,
ymax = DecesCovid,
fill="Décés hospitaliers du COVID"), alpha=0.5) +
geom_ribbon(aes(x=Date,
ymin = DecesAttendus - 1.96*DecesAttendusSE,
ymax = DecesAttendus + 1.96*DecesAttendusSE,
fill="Sur/sous-mortalité normale"), alpha=0.1) +
scale_fill_manual(c("",""),values=c("black","blue")) +
theme_minimal() +
theme(plot.title = element_text(size = 14, face = "bold"),
plot.subtitle = element_text(size = 12),
plot.caption = element_text(size = 10, face = "italic"),
legend.position = "top") +
labs(x = NULL,
y = NULL,
title = "Mortalité hebdomadaire en France",
subtitle = "Nombre de décés observés et attendus en absence d'épidémie (grippale ou Covid19)")
ggsave("gTimeSeriesPoisson.png",plot=gTimeSeriesPoisson, bg="white", height = 7, width =10)
print(gTimeSeriesPoisson)
dbMerge$WeekNum<-substr(ISOweek(dbMerge$Date), 6, 8)
dbMerge$Annee<-substr(ISOweek(dbMerge$Date), 1, 4)
dbMerge$AnneeNum<-as.numeric(dbMerge$Annee)
dbMergeBis<- dbMerge %>%
mutate(ExcesMortalite=DECES-DecesAttendus) %>%
filter(AnneeNum>=2014) %>%
group_by(Annee) %>%
mutate(ExcesMortaliteCumsum=cumsum(ExcesMortalite)) %>%
ungroup() %>%
subset(select = c(Date,ISO.week,ExcesMortaliteCumsum,WeekNum,Annee,AnneeNum))
graph.ExcesMortalite<-ggplot() +
geom_line(data = filter(dbMergeBis, dbMergeBis$AnneeNum>2019),
aes(x=WeekNum, y=ExcesMortaliteCumsum, group = Annee, color = Annee),
show.legend = TRUE,
na.rm=TRUE,
size=2)  +
geom_line(data = filter(dbMergeBis, dbMergeBis$AnneeNum<=2019),
aes(x=WeekNum, y=ExcesMortaliteCumsum, group = Annee ),
show.legend = FALSE,
na.rm=TRUE,
size = 0.5,
color = "grey")  +
geom_smooth(data = filter(dbMergeBis, dbMergeBis$AnneeNum<=2019),
aes(x=WeekNum, y=ExcesMortaliteCumsum, group = 1),
show.legend = FALSE,
na.rm=TRUE,
color = "yellow",
size = 1.5,
span=0.1)  +
scale_y_continuous(breaks=c(0,10000,20000,30000,40000,50000,60000))+
scale_x_discrete(breaks = c("W05","W10","W15","W20","W25","W30", "W35","W40","W45","W50") )+
geom_hline( yintercept = 0)  +
theme_minimal() +
theme(plot.title = element_text(size = 14, face = "bold"),
plot.subtitle = element_text(size = 10),
plot.caption = element_text(size = 10, face = "italic"),
legend.position = "right") +
labs(x = NULL,
y = NULL,
color = "Année",
title = "Excés de mortalité en France de 2020 à 2023",
subtitle = "La courbe jaune représente l'excés de mortalité moyen sur la période 2014-2019, principlement lié aux épidémies grippales",
caption = "Sources : Santé Publique France, Insee et Réseau Sentinelles.\nCalculs et erreurs : P. Aldama / @paldama")
ggsave("grExcesMortalite.png",plot = graph.ExcesMortalite, bg = "white", width=12)
gMortalite<-ggarrange(gTimeSeriesPoisson,graph.ExcesMortalite,nrow=2)
ggsave("gMortalite.png",plot=gMortalite,bg="white",height=10, width=9)
# Plot les données en time series
gTimeSeriesPoisson<-ggplot(data=filter(dbMerge,dbMerge$Annee>=2014)) +
geom_line(aes(x=Date, y=DECES, color = "obs"),size=0.5) +
geom_line(aes(x=Date, y=DecesAttendus, color = "fit"),size=1) +
scale_color_manual(name =" Nombre de décés ",
labels = c("attendus","observés"),
values = c("obs" = "black", "fit" = "blue"))+
geom_ribbon(aes(x=Date,
ymin = DecesAttendus ,
ymax = DecesCovid,
fill="Décés hospitaliers du COVID"), alpha=0.5) +
geom_ribbon(aes(x=Date,
ymin = DecesAttendus - 1.96*DecesAttendusSE,
ymax = DecesAttendus + 1.96*DecesAttendusSE,
fill="Sur/sous-mortalité normale"), alpha=0.1) +
scale_fill_manual(c("",""),values=c("purple","blue")) +
theme_minimal() +
theme(plot.title = element_text(size = 14, face = "bold"),
plot.subtitle = element_text(size = 12),
plot.caption = element_text(size = 10, face = "italic"),
legend.position = "top") +
labs(x = NULL,
y = NULL,
title = "Mortalité hebdomadaire en France",
subtitle = "Nombre de décés observés et attendus en absence d'épidémie (grippale ou Covid19)")
ggsave("gTimeSeriesPoisson.png",plot=gTimeSeriesPoisson, bg="white", height = 7, width =10)
print(gTimeSeriesPoisson)
dbMerge$WeekNum<-substr(ISOweek(dbMerge$Date), 6, 8)
dbMerge$Annee<-substr(ISOweek(dbMerge$Date), 1, 4)
dbMerge$AnneeNum<-as.numeric(dbMerge$Annee)
dbMergeBis<- dbMerge %>%
mutate(ExcesMortalite=DECES-DecesAttendus) %>%
filter(AnneeNum>=2014) %>%
group_by(Annee) %>%
mutate(ExcesMortaliteCumsum=cumsum(ExcesMortalite)) %>%
ungroup() %>%
subset(select = c(Date,ISO.week,ExcesMortaliteCumsum,WeekNum,Annee,AnneeNum))
graph.ExcesMortalite<-ggplot() +
geom_line(data = filter(dbMergeBis, dbMergeBis$AnneeNum>2019),
aes(x=WeekNum, y=ExcesMortaliteCumsum, group = Annee, color = Annee),
show.legend = TRUE,
na.rm=TRUE,
size=2)  +
geom_line(data = filter(dbMergeBis, dbMergeBis$AnneeNum<=2019),
aes(x=WeekNum, y=ExcesMortaliteCumsum, group = Annee ),
show.legend = FALSE,
na.rm=TRUE,
size = 0.5,
color = "grey")  +
geom_smooth(data = filter(dbMergeBis, dbMergeBis$AnneeNum<=2019),
aes(x=WeekNum, y=ExcesMortaliteCumsum, group = 1),
show.legend = FALSE,
na.rm=TRUE,
color = "yellow",
size = 1.5,
span=0.1)  +
scale_y_continuous(breaks=c(0,10000,20000,30000,40000,50000,60000))+
scale_x_discrete(breaks = c("W05","W10","W15","W20","W25","W30", "W35","W40","W45","W50") )+
geom_hline( yintercept = 0)  +
theme_minimal() +
theme(plot.title = element_text(size = 14, face = "bold"),
plot.subtitle = element_text(size = 10),
plot.caption = element_text(size = 10, face = "italic"),
legend.position = "right") +
labs(x = NULL,
y = NULL,
color = "Année",
title = "Excés de mortalité en France de 2020 à 2023",
subtitle = "La courbe jaune représente l'excés de mortalité moyen sur la période 2014-2019, principlement lié aux épidémies grippales",
caption = "Sources : Santé Publique France, Insee et Réseau Sentinelles.\nCalculs et erreurs : P. Aldama / @paldama")
ggsave("grExcesMortalite.png",plot = graph.ExcesMortalite, bg = "white", width=12)
gMortalite<-ggarrange(gTimeSeriesPoisson,graph.ExcesMortalite,nrow=2)
ggsave("gMortalite.png",plot=gMortalite,bg="white",height=10, width=9)
ggplot() +
geom_line(data = filter(dbMergeBis, dbMergeBis$AnneeNum>2019),
aes(x=WeekNum, y=ExcesMortaliteCumsum, group = Annee, color = Annee),
show.legend = TRUE,
na.rm=TRUE,
size=2)  +
geom_line(data = filter(dbMergeBis, dbMergeBis$AnneeNum<=2019),
aes(x=WeekNum, y=ExcesMortaliteCumsum, group = Annee ),
show.legend = FALSE,
na.rm=TRUE,
size = 0.5,
color = "grey")  +
geom_smooth(data = filter(dbMergeBis, dbMergeBis$AnneeNum<=2019),
aes(x=WeekNum, y=ExcesMortaliteCumsum, group = 1),
show.legend = FALSE,
na.rm=TRUE,
color = "yellow",
size = 1.5,
span=0.1)  +
scale_y_continuous(breaks=c(0,10000,20000,30000,40000,50000,60000))+
scale_x_discrete(breaks = c("W05","W10","W15","W20","W25","W30", "W35","W40","W45","W50") )+
geom_hline( yintercept = 0)  +
theme_minimal() +
theme(plot.title = element_text(size = 14, face = "bold"),
plot.subtitle = element_text(size = 10),
plot.caption = element_text(size = 10, face = "italic"),
legend.position = "top") +
labs(x = NULL,
y = NULL,
color = "Année",
title = "Excés de mortalité en France de 2020 à 2023",
subtitle = "La courbe jaune représente l'excés de mortalité moyen sur la période 2014-2019, principlement lié aux épidémies grippales",
caption = "Sources : Santé Publique France, Insee et Réseau Sentinelles.\nCalculs et erreurs : P. Aldama / @paldama")
graph.ExcesMortalite<-ggplot() +
geom_line(data = filter(dbMergeBis, dbMergeBis$AnneeNum>2019),
aes(x=WeekNum, y=ExcesMortaliteCumsum, group = Annee, color = Annee),
show.legend = TRUE,
na.rm=TRUE,
size=2)  +
geom_line(data = filter(dbMergeBis, dbMergeBis$AnneeNum<=2019),
aes(x=WeekNum, y=ExcesMortaliteCumsum, group = Annee ),
show.legend = FALSE,
na.rm=TRUE,
size = 0.5,
color = "grey")  +
geom_smooth(data = filter(dbMergeBis, dbMergeBis$AnneeNum<=2019),
aes(x=WeekNum, y=ExcesMortaliteCumsum, group = 1),
show.legend = FALSE,
na.rm=TRUE,
color = "yellow",
size = 1.25,
span=0.1)  +
scale_y_continuous(breaks=c(0,10000,20000,30000,40000,50000,60000))+
scale_x_discrete(breaks = c("W05","W10","W15","W20","W25","W30", "W35","W40","W45","W50") )+
geom_hline( yintercept = 0)  +
theme_minimal() +
theme(plot.title = element_text(size = 14, face = "bold"),
plot.subtitle = element_text(size = 10),
plot.caption = element_text(size = 10, face = "italic"),
legend.position = "top") +
labs(x = NULL,
y = NULL,
color = "Année",
title = "Excés de mortalité en France de 2020 à 2023",
subtitle = "La courbe jaune représente l'excés de mortalité moyen sur la période 2014-2019, principlement lié aux épidémies grippales",
caption = "Sources : Santé Publique France, Insee et Réseau Sentinelles.\nCalculs et erreurs : P. Aldama / @paldama")
ggsave("grExcesMortalite.png",plot = graph.ExcesMortalite, bg = "white", width=12)
gMortalite<-ggarrange(gTimeSeriesPoisson,graph.ExcesMortalite,nrow=2)
ggsave("gMortalite.png",plot=gMortalite,bg="white",height=10, width=9)
